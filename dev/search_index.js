var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Fit-function","page":"API","title":"Fit function","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fit_mle_RO\nfit_mle_RR\nfit_TN\nfit_AR1","category":"page"},{"location":"api/#SmoothPeriodicStatsModels.fit_mle_RO","page":"API","title":"SmoothPeriodicStatsModels.fit_mle_RO","text":"fit_mle_RO(df::DataFrame, K, T, degree, local_order)\n\nGiven a DataFrame df with known hidden states column z ‚àà 1:K. The rain occurrences of the new station are fitted conditionally to the hidden state. For local_order>0 the model is also autoregressive with its past.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.fit_mle_RR","page":"API","title":"StochasticWeatherGenerators.fit_mle_RR","text":"fit_mle_RR(df::DataFrame, local_order,  K = length(unique(df.z)); maxiter=5000, tol=2e-4, robust=true, silence=true, warm_start=true, display=:none, mix‚ÇÄ=mix_ini(length(unique(dayofyear_Leap.(df.DATE)))))\n\nFit the strictly positive rain amounts RR>0 distribution g_kt(r) w.r.t. to each hidden states k‚àà[1,K] (provided in a column of df.z).  The fitted model could in principle be any seasonal model. For now by default it is a double exponential model,\n\ng_kt(r) = alpha(tk)exp(-rtheta_1(tk))theta_1(tk) + (1-alpha(tk))exp(-rtheta_2(tk))theta_2(tk)\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.fit_TN","page":"API","title":"StochasticWeatherGenerators.fit_TN","text":"fit_TN(df_full::DataFrame, ùêÉùêûùê†, T; kwargs...)\n\nFit the variable TN (daily minimum temperature). In fact it fits the difference ŒîT = TX - TN to ensure a positive difference between TX and TN\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.fit_AR1","page":"API","title":"StochasticWeatherGenerators.fit_AR1","text":"fit_AR1(df_full::DataFrame, var, ùêÉùêûùê†, K = length(unique(df_full.z)), T = length(unique(n2t)))\n\nFit a Seasonal AR(1) model of period T and with K hidden states for the variable X of the DataFrame df_full. The hidden states must be given in a the column z of i.e. df_full.z. The correspondance between day of the year t and index in the time series n must be given in the column n2t i.e. df_full.n2t.\n\nX_n+1 = mu(t_n z_n) + phi(t_n z_n) X_n + sigma(t_n z_n)xi\n\nwith xi sim mathcalN(01).\n\n\n\n\n\n","category":"function"},{"location":"api/#Climate-indexes","page":"API","title":"Climate indexes","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"VCX3\nmonthly_agg\ncorTail\nlonguest_spell\npmf_spell\n","category":"page"},{"location":"api/#StochasticWeatherGenerators.VCX3","page":"API","title":"StochasticWeatherGenerators.VCX3","text":"VCX3(df; y_col, nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y for every year.  By default, y_col is the first column not with a Date type\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nVCX3(df)\n\n\n\n\n\nVCX3(y, idxs; nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y. Here idxs can be a vector of vector (or range) corresponds to the index of every year.\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nVCX3(df.Temperature, idx_year)\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.monthly_agg","page":"API","title":"StochasticWeatherGenerators.monthly_agg","text":"monthly_agg(y::AbstractArray, idxs)\n\nusing DataFrames, Dates\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nmonthly_agg(df, :Temperature) \nmonthly_agg(df, :Temperature, mean) \n# or\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nidx_month = [findall(x-> month.(x) == m, df[:, :DATE]) for m in 1:12]\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_month]\nmonthly_agg(df.Temperature, idx_all)\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.corTail","page":"API","title":"StochasticWeatherGenerators.corTail","text":"corTail(x::AbstractMatrix, q = 0.95)\n\nCompute the (symmetric averaged) tail index matrix M of a vector x, i.e. M[i, j] = (‚Ñô(x[:,j] > Fx‚±º(q) ‚à£ x[:,i] > Fx·µ¢(q)) + ‚Ñô(x[:,i] > Fx·µ¢(q) ‚à£ x[:,j] > Fx‚±º(q)))/2 where Fx(q) is the CDF of x. Note it uses the same convention as cor function i.e. observations in rows and features in column.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.longuest_spell","page":"API","title":"StochasticWeatherGenerators.longuest_spell","text":"longuest_spell(y::AbstractArray; value=0)\n\nCompute the length of the longuest consecutive sequence of value in y\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.pmf_spell","page":"API","title":"StochasticWeatherGenerators.pmf_spell","text":"pmf_spell(y::AbstractVector, value)\n\nReturn the distribution of spells (consecutive sequence of with the same value) length of value in y\n\n\n\n\n\n","category":"function"},{"location":"api/#Simulations","page":"API","title":"Simulations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"rand_RR\nrand_cond","category":"page"},{"location":"api/#StochasticWeatherGenerators.rand_RR","page":"API","title":"StochasticWeatherGenerators.rand_RR","text":"rand_RR(mixs::AbstractArray{<:MixtureModel}, n2t::AbstractVector, z::AbstractVector, y::AbstractMatrix, Œ£k::AbstractArray)\n\nGenerate a (nonhomegenous) sequence of length length(n2t) of rain amounts conditionally to a given dry/wet matrix y and (hidden) state sequence z. Univariate distribution are given by mixs while correlations are given by covariance matrix Œ£k.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.rand_cond","page":"API","title":"StochasticWeatherGenerators.rand_cond","text":"rand_cond(œµ, z, Œ∏_uni, Œ∏_cor, n2t, T)\n\nGenerate a random variable conditionally to another one assuming a Gaussian copula dependance with correlation œÅ‚Çú(t / T, Œ∏_cor) (depending on the day of the year). œµ is assumed Normal(0,1).\n\n\n\n\n\n","category":"function"},{"location":"api/#Correlation-utilities","page":"API","title":"Correlation utilities","text":"","category":"section"},{"location":"api/#For-temperature","page":"API","title":"For temperature","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"cor_groupby\ncor_groupbyTXTN\ncov_ar1","category":"page"},{"location":"api/#StochasticWeatherGenerators.cor_groupby","page":"API","title":"StochasticWeatherGenerators.cor_groupby","text":"cor_groupby(df::DataFrame, var1, var2, T::Integer; Œ∏0 = [0, 0.0, 0.0])\n\nCompute and fit the cor between two var with a smooth function for each z. \n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.cor_groupbyTXTN","page":"API","title":"StochasticWeatherGenerators.cor_groupbyTXTN","text":"cor_groupbyTXTN(df::DataFrame, T::Integer; Œ∏0 = [0, 0.0, 0.0])\n\nCompute and fit the cor between :TX and :TX-:TN with a smooth function for each z. \n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.cov_ar1","page":"API","title":"StochasticWeatherGenerators.cov_ar1","text":"cov_ar1(dfs::AbstractArray{<:DataFrame}, ar1s, var, K = length(unique(dfs[1].z)))\n\nFit the covariance matrix of the residual œµ of several AR(1) models ar1s. One matrix is fitted per hidden state.  The hidden state z must be given in df.z. Note that we consider constant in time the covariance matrices.\n\n\n\n\n\n","category":"function"},{"location":"api/#For-rain","page":"API","title":"For rain","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"cor_RR\ncov_RR\nŒ£_Spearman2Pearson\nŒ£_Kendall2Pearson\njoint_rain","category":"page"},{"location":"api/#StochasticWeatherGenerators.cor_RR","page":"API","title":"StochasticWeatherGenerators.cor_RR","text":"cor_RR(dfs::AbstractArray{<:DataFrame}[, K]; cor_method=Œ£_Spearman2Pearson, force_PosDef = true)\n\nCompute the (strictly positive) rain pair correlations cor(Rs‚ÇÅ > 0, Rs‚ÇÇ > 0) between each pair of stations s‚ÇÅ, s‚ÇÇ for each hidden state Z = k.\n\nInput: a array dfs of df::DataFrame of length S (number of station) where each df have :DATE, :RR, :z (same :z for each df).\n\nOutput: K correlation matrix of size S√óS\n\nOptions:\n\nforce_PosDef will enforce Positive Definite matrix with NearestCorrelationMatrix.jl.\ncor_method: typically Œ£_Spearman2Pearson or Œ£_Kendall2Pearson\nimpute_missing: if nothing, missing will be outputted when two stations do not have at least two rain days in common. Otherwise the value impute_missing will be set.\n\nŒ£RR = cor_RR(data_stations, K)\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.cov_RR","page":"API","title":"StochasticWeatherGenerators.cov_RR","text":"cov_RR(dfs::AbstractArray{<:DataFrame}[, K]; cor_method=Œ£_Spearman2Pearson, force_PosDef = true)\n\nCompute the (strictly positive) rain pair covariance cov(Rs‚ÇÅ > 0, Rs‚ÇÇ > 0) between each pair of stations s‚ÇÅ, s‚ÇÇ for each hidden state Z = k.\n\nInput: a array dfs of df::DataFrame of length S (number of station) where each df have :DATE, :RR, :z (same :z for each df).\n\nOutput: K covariance matrix of size S√óS\n\nOptions:\n\nforce_PosDef will enforce Positive Definite matrix with NearestCorrelationMatrix.jl.\ncor_method: typically Œ£_Spearman2Pearson or Œ£_Kendall2Pearson\nimpute_missing: if nothing, missing will be outputted when two stations do not have at least two rain days in common. Otherwise the value impute_missing will be set.\n\nŒ£RR = cov_RR(data_stations, K)\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.Œ£_Spearman2Pearson","page":"API","title":"StochasticWeatherGenerators.Œ£_Spearman2Pearson","text":"Œ£_Spearman2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Spearman correlation #TODO Add ref\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.Œ£_Kendall2Pearson","page":"API","title":"StochasticWeatherGenerators.Œ£_Kendall2Pearson","text":"Œ£_Kendall2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Kendall correlation #TODO Add ref\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.joint_rain","page":"API","title":"StochasticWeatherGenerators.joint_rain","text":"joint_rain(M::AbstractMatrix, j1::Integer, j2::Integer, r = 0)\n\nSelect all the rows of M with values for (two) columns above some value r.\n\n\n\n\n\n","category":"function"},{"location":"api/#Map-utilities","page":"API","title":"Map utilities","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"distance_x_to_y\ndms_to_dd","category":"page"},{"location":"api/#StochasticWeatherGenerators.distance_x_to_y","page":"API","title":"StochasticWeatherGenerators.distance_x_to_y","text":"distance_x_to_y(station_x, station_y)\n\nDistance in km between two stations. Does not take into account altitude. station must have a field LAT and LON in Decimal Degree.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.dms_to_dd","page":"API","title":"StochasticWeatherGenerators.dms_to_dd","text":"dms_to_dd(l)\n\nConvert l in Degrees Minutes Seconds to Decimal Degrees. Inputs are strings of the form\n\nLAT    : Latitude in degrees:minutes:seconds (+: North, -: South)\nLON    : Longitude in degrees:minutes:seconds (+: East, -: West)\n\n\n\n\n\n","category":"function"},{"location":"api/#Data-manipulation","page":"API","title":"Data manipulation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"collect_data_ECA\ncollect_data_INRAE\ncollect_data_MeteoFrance \ndownload_data_MeteoFrance \nclean_data \nselect_in_range_df\nshortname","category":"page"},{"location":"api/#StochasticWeatherGenerators.collect_data_ECA","page":"API","title":"StochasticWeatherGenerators.collect_data_ECA","text":"collect_data_ECA(STAID::Integer, path::String, var::String=\"RR\"; skipto=19, header = 18)\n\npath gives the path where all data files are stored in a vector\n\n\n\n\n\ncollect_data_ECA(STAID, date_start::Date, date_end::Date, path::String, var::String=\"RR\"; portion_valid_data=1, skipto=19, header = 18, return_nothing = true)\n\npath gives the path where all data files are stored in a vector\nFilter the DataFrame s.t. date_start ‚â§ :DATE ‚â§ date_end\nvar = \"RR\", \"TX\" etc.\nportion_valid_data is the portion of valid data we are ok with. If we don't want any missing, fix it to 1.\nskipto and header for csv files with meta informations/comments at the beginning of files. See CSV.jl.\nreturn_nothing if true it will return nothing is the file does not exists or does not have enough valid data.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.collect_data_INRAE","page":"API","title":"StochasticWeatherGenerators.collect_data_INRAE","text":"collect_data_INRAE(station_path::String; show_warning=false, impute_missing=[])\n\nRead from a file an INRAE formatted weather station data and transform it to match ECA standard naming conventions.\n\nimpute_missing expects a vector of column name(s) where to impute missing with Impute.Interpolate e.g. impute_missing=[:TX].\nshow_warning in case of missing data. false for no column, true for all variables columns and for selected columns e.g. show_warning = [:TX].\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.collect_data_MeteoFrance","page":"API","title":"StochasticWeatherGenerators.collect_data_MeteoFrance","text":"collect_data_MeteoFrance(STAID; show_warning=false, impute_missing=[], period=\"1950-2021\", variables = \"all\")\n\nGiven a STAID (station ID given by M√©t√©o France), it returns a DataFrame with data in period and for the variables.\n\nSTAID can be an integer or string.\nOption for period are \"1846-1949\", \"1950-2021\", \"2022-2023\"\nOption for variables are all, \"RR-T-Wind\", \"others\"\nimpute_missing expects a vector of column name(s) where to impute missing with Impute.Interpolate e.g. impute_missing=[:TX].\nshow_warning in case of missing data. false for no column, true for all variables columns and for selected columns e.g. show_warning = [:TX].\n\nThe data is available through the French Data.gouv.fr website api. Data may be updated without notice. See the following two links to get informations on the \"RR-T-Wind\" and \"others\" variables (in French)\n\nhttps://object.files.data.gouv.fr/meteofrance/data/synchroftp/BASE/QUOT/QdescriptifchampsRR-T-Vent.csv\nhttps://object.files.data.gouv.fr/meteofrance/data/synchroftp/BASE/QUOT/Qdescriptifchampsautres-parametres.csv\n\nOr the the SICLIMA website with information (in French) about computation and conversion for some weather variables/index.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.download_data_MeteoFrance","page":"API","title":"StochasticWeatherGenerators.download_data_MeteoFrance","text":"download_data_MeteoFrance(STAID, period = \"1950-2021\", variables = \"all\")\n\nOption for period are \"1846-1949\", \"1950-2021\", \"2022-2023\"\nOption for variables are all, \"RR-T-Wind\", \"others\"\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.clean_data","page":"API","title":"StochasticWeatherGenerators.clean_data","text":"clean_data(df::DataFrame; show_warning=false, impute_missing=[])\n\nImpute missing and show warning for missings. It assumes that the first two columns are not numeric.\n\nimpute_missing expects a vector of column name(s) where to impute missing with Impute.Interpolate e.g. impute_missing=[:TX].\nshow_warning in case of missing data. false for no column, true for all variables columns and for selected columns e.g. show_warning = [:TX].\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.select_in_range_df","page":"API","title":"StochasticWeatherGenerators.select_in_range_df","text":"select_in_range_df(datas, start_Date, interval_Date, [portion])\n\nSelect station with some data availability in dates and quality (portion of valid data).  Input is a vector (array) of DataFrame (one for each station for example) or a Dict of DataFrame. If 0 < portion ‚â§ 1 is specified, it will authorize some portion of data to be missing.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticWeatherGenerators.shortname","page":"API","title":"StochasticWeatherGenerators.shortname","text":"shortname(name::String)\n\nExperimental function that returns only the most relevant part of a station name.\n\nlong_name = \"TOULOUSE-BLAGNAC\"\nshortname(long_name) # \"TOULOUSE\"\n\n\n\n\n\n","category":"function"},{"location":"api/#Generic-utilities","page":"API","title":"Generic utilities","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"my_color","category":"page"},{"location":"api/#StochasticWeatherGenerators.my_color","page":"API","title":"StochasticWeatherGenerators.my_color","text":"my_color(k, K)\n\nConvenience for plot colors pattern and hidden states to blue for k=1 (‚àºwetter) and orange for k=K (‚àºdriest)\n\n\n\n\n\n","category":"function"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"EditURL = \"../../../examples/tuto_add_station_variable.jl\"","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"using Markdown#hide\nimport Pkg;\ncd(@__DIR__)#hide","category":"page"},{"location":"examples/tuto_add_station_variable/#Adding-stations-and-weather-variables","page":"Add weather variables and crop model application","title":"Adding stations and weather variables","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"This tutorial shows how to easily train weather stations given the hidden states sequence z obtained in the previous tutorial. We will show how to make a (simplistic) mutlisite SWG with multiple correlated weather variables such as daily Rain RR (mathrmmmathrmmmathrmm^2), daily Temperature minimum TN (¬∞C), maximum TX (¬∞C), total daily solar irradiance QQ (MJ/mathrmm^2) and daily evapotranspiration Penman ETPP (mathrmmmathrmmmathrmm^2). This model will be trained with respect to the given hidden states and the parameters will be periodic and vary smoothly during a calendar year.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"The hidden states and the seasonality are enough to correlate well the weather variables without extra codependency between simulated variables.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"This multisite, multivariable model has been used as input of the STIC crop model to generate data of annual crop yield for maize in the GenHack 3 hackaton.","category":"page"},{"location":"examples/tuto_add_station_variable/#Set-up","page":"Add weather variables and crop model application","title":"Set up","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/#Package-and-functions","page":"Add weather variables and crop model application","title":"Package and functions","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"using CSV, DelimitedFiles# File Read/Load/Save/dwl\nimport JLD# File Read/Load/Save/dwl\nimport Downloads\nusing DataFrames, DataFramesMeta # DataFrames\nusing Dates\nusing Random, Distributions\nusing LaTeXStrings","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"The two main packages for this tutorial are not yet registered in the official Julia registry, since they are not quite fully ready. They can be either added through my local Julia registry with the LocalRegistry.jl package i.e.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"using Pkg\npkg\"registry add https://github.com/dmetivie/LocalRegistry\"\nPkg.add(\"SmoothPeriodicStatsModels\")\nPkg.add(\"StochasticWeatherGenerators\")","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"using SmoothPeriodicStatsModels\nusing StochasticWeatherGenerators","category":"page"},{"location":"examples/tuto_add_station_variable/#Data-extraction-and-settings","page":"Add weather variables and crop model application","title":"Data extraction and settings","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"To get the interesting weather variables, we use weather station provided by a the French research institute for agronomy and environment (INRAE). This data is available through the INRAE CLIMATIK platform[climatik] (https://agroclim.inrae.fr/climatik/, in French) managed by the AgroClim laboratory of Avignon, France. Unfortunately, these data are not yet open access (they should be soon). M√©t√©o France do have a version of this data and it is accessible through an API on the website Data.Gouv.fr. This package provide a simple command to extract the data of one station (given its STAtionID) from the API.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"# Download the four stations used in this tutorial from MeteoFrance collection\ndfs = collect_data_MeteoFrance.([49215002, 80557001, 40272002, 63345002])","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"For example","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"collect_data_MeteoFrance(49215002)[1:10,:]","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"However, the data there does not exactly match the available on CLIMATIK, (less data, different values ...). For now I stored the CLIMATIK data on a private repo until the M√©t√©o France data is fixed.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"warning: Warning\nWhile testing this function, it appears that MeteoFrance API might bug sometimes returning an error for some stations (and working for others). In that case, you can check the API directly here.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"[climatik]: Delannoy, David; Maury, Olivier; D√©come, J√©r√©mie, 2022, ‚ÄúCLIMATIK : syst√®me d‚Äôinformation pour les donn√©es du r√©seau agroclimatique INRAE‚Äù, https://doi.org/10.57745/AJNXEN, Recherche Data Gouv, V1","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"local_order = 1\nmemory_order = 2^local_order\nK = 4\ndegree = 1\nT = 366","category":"page"},{"location":"examples/tuto_add_station_variable/#Weather-stations","page":"Add weather variables and crop model application","title":"Weather stations","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"We select four INRAE weather stations Montreuil-Bellay, Mons-en-Chauss√©e, Saint-Martin-de-Hinx and Saint-G√®nes-Champanelle. Note that these are not the training stations used in the paper tutorial, however we will still use the weather regime trained there. The rain occurrence generation will be conditionally independent to this weather regime across all these four stations.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Station French department number.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"station_dep = [49, 80, 40, 63]\nstation_name = [\"Montreuil-Bellay\", \"Mons-en-Chauss√©e\", \"Saint-Martin-de-Hinx\", \"Saint-G√®nes-Champanelle\"]\nstation_gps = [(LAT = 47.13, LON = -0.1415), (LAT = 49.875, LON = 3.031), (LAT = 43.5708, LON = -1.29933), (LAT = 45.723, LON = 3.019) ]\nD = length(station_name)\n\nstation_path = string.(\"https://forgemia.inra.fr/david.metivier/weather_data_mistea/-/raw/main/INRAE_stations/INRAE_STATION_\", [49215002, 80557001, 40272002, 63345002], \".csv\") .|> download\n\nstation_ndep = string.(station_name, \" (\", station_dep, \")\")","category":"page"},{"location":"examples/tuto_add_station_variable/#Load","page":"Add weather variables and crop model application","title":"Load","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Load the AutoRegressive Seasonal HMM computed in this tutorial.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"file_hmm = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/refs/heads/master/assets/tuto_1/hmm_fit_K_4_d_1_m_1.jld\")\nbegin\n    hmm_infos = JLD.load(file_hmm)\n    hmm_fit_full = hmm_infos[\"hmm\"]\n    hist = hmm_infos[\"hist\"]\n    Œ∏q_fit = hmm_infos[\"Q_param\"]\nend","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Load the sequence of estimated hidden states for the historical sequence.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"file_df_z = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/refs/heads/master/assets/tuto_1/z_hat_K_4_d_1_m_1.csv\")\ndf_z = CSV.File(file_df_z) |> DataFrame\ndf_z[1:10, :] # Show the first lines of the dataframes","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Load and filter the data by date. There are a few missing values that we impute using Impute.Interpolate.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"begin\n    data_stations_full = collect_data_INRAE.(station_path; show_warning=[:RR, :TX], impute_missing=[:RR, :TX])\n    for df in data_stations_full\n        @transform!(df, :RO = onefy.(:RR))\n    end\nend\n\ndata_stations = [innerjoin(df, df_z; on=:DATE) for df in data_stations_full]","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"We compute the mean temperature during the growth month of maize (May to September) at each location.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"mean_summer_TX = round.([@combine(@subset(df, month.(:DATE) .‚àà tuple([5,6,7,8,9])), :meanTX=mean(:TX))[1,1] for df in data_stations_full], digits = 1)\nfile_for_maps_with_geomakie = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_geo_makie_features.jl\")\ninclude(file_for_maps_with_geomakie)\nFR_map = map_with_stations(last.(station_gps), first.(station_gps), mean_summer_TX; station_name=string.(\"     \",station_ndep), show_value=true, colorbar_show=true, precision_scale = 50, colorbar_label = \"¬∞C\")","category":"page"},{"location":"examples/tuto_add_station_variable/#Fitting","page":"Add weather variables and crop model application","title":"Fitting","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"We now fit the observed weather variables to seasonal models w.r.t. the hidden variables i.e. the models we fit depend continuously on the day of the year tin 1366 and on the provided hidden state Z in 1K.","category":"page"},{"location":"examples/tuto_add_station_variable/#Rain-Occurrences","page":"Add weather variables and crop model application","title":"Rain Occurrences","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Fit the Rain Occurrences of INRAE stations with respect to the given hidden states sequence. These distributions are then cast into the HMM emission distribution. The pre-trained transitons matrices Q‚Çú are kept the same. We could have added these new emission distributions to the existing one, however here we focus only on these four stations.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Œ∏ = zeros(K, D, memory_order, 2degree + 1)\nB = Array{Bernoulli}(undef, K, T, D, memory_order)\n@time \"Fit RO\" for (j, df) in enumerate(data_stations)\n    B[:, :, j, :], Œ∏[:, j, :, :] = fit_mle_RO(df, local_order, degree)\nend\nŒ∏y_fit = Œ∏ # hmm_infos[\"Y_param\"] for old stations\na = zeros(K)\na[data_stations[1].z[1]] = 1.0 # Initial state of the HMM\nhmm_fit = ARPeriodicHMM(a, hmm_fit_full.A, B)","category":"page"},{"location":"examples/tuto_add_station_variable/#Rain-Amounts","page":"Add weather variables and crop model application","title":"Rain Amounts","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Here for simplicity we select the double exponential model for the rain amount. We aim for a generic interface where one could easily change this choice to other univariate distribution e.g. mix‚ÇÄ = MixtureModel([Exponential(1), Gamma(1,2)], [1/2,1/2]) or mix‚ÇÄ = Pareto(1). For now this is not supported (because of the seasonal fit).","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time \"Fit Rain amounts\" mix_allE = fit_mle_RR.(data_stations, local_order; mix‚ÇÄ=StochasticWeatherGenerators.mix_ini(T));\nnothing #hide","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"The Gaussian copula covariance matrices are then estimated.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Œ£¬≤RR = cov_RR(data_stations, K)","category":"page"},{"location":"examples/tuto_add_station_variable/#Temperature","page":"Add weather variables and crop model application","title":"Temperature","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"We first fit the daily maximal temperature (we could have started with minimal temperatures). We use the same principle as for RR i.e. first fit each univariate distribution and then the copula.","category":"page"},{"location":"examples/tuto_add_station_variable/#Temperature-Max","page":"Add weather variables and crop model application","title":"Temperature Max","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time \"Fit TX\" ar1sTX = fit_AR1.(data_stations, :TX, degree)\nŒ£¬≤TX = cov_ar1(data_stations, ar1sTX, :TX)","category":"page"},{"location":"examples/tuto_add_station_variable/#Minimal-Temperature","page":"Add weather variables and crop model application","title":"Minimal Temperature","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"To directly fit the TN one could do the following","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"ar1sTN = fit_AR1.(data_stations, :TN, degree)\nŒ£¬≤TN = cov_ar1(dropmissing.(data_stations), ar1sTN, :TN)","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"However this produce TN independantly of TX (and we can have TN>TX). To prevent that we fit the positive difference ŒîT = TX-TN with a Gamma distribution. We will then simulate the TN conditionally to the TX","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time \"Fit TN residuals\" Œ∏_ŒîT = fit_TN.(data_stations, 1, T; print_level=0) # 1 is the degree\nŒ∏_cor = cor_groupbyTXTN.(data_stations, T)\nf(Œ∏) = Gamma(Œ∏[1], Œ∏[2]) # other options e.g. MixtureModel([Exponential(Œ∏[1]), Exponential(Œ∏[2])], [Œ∏[3], 1 - Œ∏[3]])\nf(t, Œ∏) = f([œÉ‚Çú(t, Œ∏[1:(2+1)]), œÉ‚Çú(t, Œ∏[(2+2):end])])","category":"page"},{"location":"examples/tuto_add_station_variable/#Solar-Irradiance-(QQ)","page":"Add weather variables and crop model application","title":"Solar Irradiance (QQ)","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"QQ must be positive, we will truncate at simulation time negative instances.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time \"Fit QQ\" ar1sQQ = fit_AR1.(data_stations, :QQ, degree)\nŒ£¬≤QQ = cov_ar1(dropmissing.(data_stations), ar1sQQ, :QQ)","category":"page"},{"location":"examples/tuto_add_station_variable/#Evapotranspiration-Penman-(ETPP)","page":"Add weather variables and crop model application","title":"Evapotranspiration Penman (ETPP)","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"ETPP must be positive, we will truncate at simulation time negative instances.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time \"Fit ETPP\" ar1sETPP = fit_AR1.(data_stations, :ETPP, degree)\nŒ£¬≤ETPP = cov_ar1(dropmissing.(data_stations), ar1sETPP, :ETPP)","category":"page"},{"location":"examples/tuto_add_station_variable/#Simulation","page":"Add weather variables and crop model application","title":"Simulation","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/#Initial-conditions","page":"Add weather variables and crop model application","title":"Initial conditions","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"y_ini = [@subset(df, :DATE .== Date(2000) - Day(1)).RO[1] for df in data_stations]'\ntx_ini = [@subset(df, :DATE .== Date(2000)).TX[1] for df in data_stations]\nz_ini = @subset(data_stations[1], :DATE .== Date(2000)).z[1]\n\ntn_ini = [@subset(df, :DATE .== Date(2000)).TN[1] for df in data_stations]\nqq_ini = [@subset(df, :DATE .== Date(2000)).QQ[1] for df in data_stations]\net_ini = [@subset(df, :DATE .== Date(2000)).ETPP[1] for df in data_stations]","category":"page"},{"location":"examples/tuto_add_station_variable/#Generation","page":"Add weather variables and crop model application","title":"Generation","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"indicatrix(x) = x > zero(x) ? x : zero(x) # used to manually suppress negative `QQ` and `ETPP`\n\nRandom.seed!(50000)","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"NSIMU = 300\nNYEAR = 50\n\nyear_start = 1986\ndate_range = Date(year_start):Day(1):Date(year_start + NYEAR - 1, 12, 31)\nn2t = dayofyear_Leap.(date_range)\nyears = unique(year.(date_range))\nN = length(n2t)","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time \"Total simulation $NSIMU of $NYEAR years\" begin\n    zs = zeros(Int, N, NSIMU)\n    ys = zeros(Bool, N, D, NSIMU)\n    rs = zeros(D, N, NSIMU)\n    txs = zeros(D, N, NSIMU)\n    œµ_TX = zeros(D, N, NSIMU)\n    ŒîTs = zeros(D, N, NSIMU)\n    qqs = zeros(D, N, NSIMU)\n    ets = zeros(D, N, NSIMU)\n\n    @time \"HMM\" for i in 1:NSIMU\n        zs[:, i], ys[:, :, i] = rand(hmm_fit, n2t; y_ini=y_ini, z_ini=z_ini, seq=true)\n    end\n    @time \"Rain\" for i in 1:NSIMU\n        rs[:, :, i] = rand_RR(mix_allE, n2t, zs[:, i], ys[:, :, i]', Œ£¬≤RR)\n    end\n    @time \"T_max\" for i in 1:NSIMU\n        txs[:, :, i], œµ_TX[:, :, i] = rand(ar1sTX, n2t, zs[:, i], Œ£¬≤TX; y‚ÇÅ=tx_ini, output_œµ=true)\n    end\n\n    @time \"T_min\" for i in 1:NSIMU\n        ŒîTs[:, :, i] = reduce(hcat, [rand_cond(œµ_TX[j, :, i], zs[:, i], Œ∏_ŒîT[j], Œ∏_cor[j], n2t, T) for j in 1:D]) |> permutedims\n    end\n    tns = txs - ŒîTs #rand(ar1sTN, n2t, zs, Œ£¬≤TN; y‚ÇÅ=tn_ini)\n    @time \"Solar Radiation\" for i in 1:NSIMU\n        qqs[:, :, i] = indicatrix.(rand(ar1sQQ, n2t, zs[:, i], Œ£¬≤QQ; y‚ÇÅ=qq_ini))\n    end\n    @time \"Evapotranspiration\" for i in 1:NSIMU\n        ets[:, :, i] = indicatrix.(rand(ar1sETPP, n2t, zs[:, i], Œ£¬≤ETPP, y‚ÇÅ=et_ini))\n    end\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Results","page":"Add weather variables and crop model application","title":"Results","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Cast the results into NSIMU = 300 times D=4 DataFrames of NYEAR = 50 years each, with columns [:DATE, :RR, :RN, :TX, :QQ, :ETPP, :STAID] where STAID is the unique station identifier. Also cast everything into a Dict for convenience.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"dicts_simu = Dict(:RR => rs, :TN => tns, :TX => txs, :QQ => qqs, :ETPP => ets)\ndfs_simus = [[DataFrame(:DATE => date_range, :RR => rs[j, :, i], :TN => tns[j, :, i], :TX => txs[j, :, i], :QQ => qqs[j, :, i], :ETPP => ets[j, :, i], :STAID => fill(data_stations[j].STAID[1], length(n2t))) for j in 1:D] for i in 1:NSIMU];\nnothing #hide","category":"page"},{"location":"examples/tuto_add_station_variable/#Plots","page":"Add weather variables and crop model application","title":"Plots","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/#Settings-for-plotting","page":"Add weather variables and crop model application","title":"Settings for plotting","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Some settings and packages to have nice plots.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"using StatsPlots\nusing StatsPlots.PlotMeasures # To play with margin in Plots\n\ngr() # plotly() # for interactive plots\ndefault(fontfamily=\"Computer Modern\")\ncur_colors = get_color_palette(:auto, 100);\nmy_palette(K) = palette(vcat(cur_colors[1], [cur_colors[c] for c in 3:4], cur_colors[2]), K)\n\nfile_for_plot_utilities = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_plot.jl\")\ninclude(file_for_plot_utilities)\nvars = [:RR, :TN, :TX, :QQ, :ETPP]","category":"page"},{"location":"examples/tuto_add_station_variable/#Plot-correlations","page":"Add weather variables and crop model application","title":"Plot correlations","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"In this section, we show different correlations between variables and stations.","category":"page"},{"location":"examples/tuto_add_station_variable/#Multisite-Correlation-for-each-variables","page":"Add weather variables and crop model application","title":"Multisite Correlation for each variables","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"@time begin\n    plt_cor_mutlisite = [plot(-1:0.1:1, -1:0.1:1, lw=2, label=:none, aspect_ratio=:equal, foreground_color_legend=nothing, background_color_legend=nothing, legend_columns=2, tickfont=12, legendfontsize=12, xlabelfontsize=16, ylabelfontsize=16) for i in 1:length(vars)]\n    for (i, vari) in enumerate(vars)\n        annotate!(plt_cor_mutlisite[i], 0.5, 1.15, (\"$(string(vari))\", 16))\n        X = dicts_simu[vari]\n        for station_1 in 1:D-1\n            @views X‚ÇÅ = X[station_1, :, :]\n            for station_2 in station_1+1:D\n                df1 = dropmissing(innerjoin(data_stations[station_1], data_stations[station_2], on=:DATE, makeunique=true))\n                @views X‚ÇÇ = X[station_2, :, :]\n                @views mean_cor = mean(cor(X‚ÇÅ[:, r], X‚ÇÇ[:, r]) for r in 1:NSIMU)\n                arr = ([cor(df1[:, vari], df1[:, Symbol(string(vari, \"_1\"))])], [mean_cor])\n                scatter!(plt_cor_mutlisite[i], arr, label=ifelse(i == 2, \"$(station_dep[station_1]) vs $(station_dep[station_2])\", :none), markersize=6)\n            end\n        end\n        xlabel!(\"Observation\")\n        i ‚àà [1, 4] ? ylabel!(\"Simulation\") : nothing\n    end\n    plt_cor_mutlisites = plot(plt_cor_mutlisite..., size=(1000, 1000), layout=(3, 3), top_margin=7px)\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Correlations-between-weather-variables-at-each-sites.","page":"Add weather variables and crop model application","title":"Correlations between weather variables at each sites.","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"markers = filter((m -> begin\n        m in Plots.supported_markers()\n    end), Plots._shape_keys)\n\nbegin\n    plt_var = [plot(-1:0.1:1, -1:0.1:1, lw=2, label=:none, aspect_ratio=:equal, foreground_color_legend=nothing, background_color_legend=nothing, legend_columns=1, tickfont=13, legendfontsize=14, xlabelfontsize=16, ylabelfontsize=16, titlefontsize=16) for j in 1:D]\n    for station_1 in 1:D\n        title!(plt_var[station_1], \"$(station_ndep[station_1])\")\n        for (i, var_1) in enumerate(vars)\n            for j in (i+1):length(vars)\n                var_2 = vars[j]\n                df1 = dropmissing(data_stations[station_1])\n                @views mean_cor = mean(cor(dicts_simu[var_1][station_1, :, r], dicts_simu[var_2][station_1, :, r]) for r in 1:NSIMU)\n                scatter!(plt_var[station_1], [cor(df1[:, var_1], df1[:, var_2])], [mean_cor], label=ifelse(station_1 == 1, \"$var_1 vs $var_2\", :none), m=markers[i], ms=8)\n            end\n        end\n    end\n    plt_vars = plot(plt_var..., size=(1000, 1000))\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Univariate-distributions","page":"Add weather variables and crop model application","title":"Univariate distributions","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"In this section we plot the marginal distribution of each variables at each sites.","category":"page"},{"location":"examples/tuto_add_station_variable/#Marginal-Distributions","page":"Add weather variables and crop model application","title":"Marginal Distributions","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"begin\n    plt_dist_univ = Dict()\n    plts_dist_univ = Dict()\n    xlabel_string = Dict(:RR => L\"Rain ($\\mathrm{m}\\mathrm{m}/\\mathrm{m}^2$)\", :TX => L\"$T_{\\mathrm{max}}$ (¬∞C)\", :TN => L\"$T_{\\mathrm{min}}$ (¬∞C)\", :QQ => L\"Solar irradiance (MJ/$\\mathrm{m}^2$)\", :ETPP => L\"Evapotranspiration ($\\mathrm{m}\\mathrm{m}/\\mathrm{m}^2$)\")\n    for XX in vars\n        plt_dist_univ[XX] = [plot(tickfont=13, legendfontsize=14, xlabelfontsize=16, ylabelfontsize=16, titlefontsize=16) for j = 1:D]\n        for (j, df) in enumerate(data_stations)\n            dist_j = XX == :RR ? [filter(!iszero, x) for x in eachcol(dicts_simu[XX][j, :, :])] : [x for x in eachcol(dicts_simu[XX][j, :, :])] # RR>0\n\n            errorlinehist!(plt_dist_univ[XX][j], dist_j, groupcolor=:grey, legend=:topright, label=islabel(j, [1], L\"Simu $q_{0,100}$\"), norm=:pdf, errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n            errorlinehist!(plt_dist_univ[XX][j], dist_j, groupcolor=:red, label=islabel(j, [1], L\"Simu $q_{25,75}$\"), norm=:pdf, errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n            dist_j_histo = XX == :RR ? filter(!iszero, dropmissing(df)[!, XX]) : dropmissing(df)[!, XX] # RR>0\n\n            errorlinehist!(plt_dist_univ[XX][j], [dist_j_histo], label=islabel(j, [1], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:pdf, errortype=:percentile)\n            XX == :RR ? ylims!(plt_dist_univ[XX][j], 1e-4, 0, yaxis=:log10) : nothing\n            XX == :RR && j == 2 ? xlims!(plt_dist_univ[XX][j], -1, 100, yaxis=:log10) : nothing # some simulated RR are super extreme and messing with the xaxis\n        end\n        [xlabel!(plt_dist_univ[XX][j], xlabel_string[XX]) for j in [3, 4]]\n        [ylabel!(plt_dist_univ[XX][j], \"PDF\") for j in [1, 3]]\n        station_ndep\n        [title!(plt_dist_univ[XX][j], station_ndep[j]) for j = 1:D]\n\n        plts_dist_univ[XX] = plot(plt_dist_univ[XX]..., size=(1000, 700), bottom_margin=11px, left_margin=15px)\n    end\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Rainfall-RR","page":"Add weather variables and crop model application","title":"Rainfall RR","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_dist_univ[:RR]","category":"page"},{"location":"examples/tuto_add_station_variable/#Temperature-max-TX","page":"Add weather variables and crop model application","title":"Temperature max TX","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_dist_univ[:TX]","category":"page"},{"location":"examples/tuto_add_station_variable/#Temperature-min-TN","page":"Add weather variables and crop model application","title":"Temperature min TN","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_dist_univ[:TN]","category":"page"},{"location":"examples/tuto_add_station_variable/#Solar-irradiance-QQ","page":"Add weather variables and crop model application","title":"Solar irradiance QQ","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_dist_univ[:QQ]","category":"page"},{"location":"examples/tuto_add_station_variable/#Evapotranspiration-ETPP","page":"Add weather variables and crop model application","title":"Evapotranspiration ETPP","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_dist_univ[:ETPP]","category":"page"},{"location":"examples/tuto_add_station_variable/#Monthly-statistics","page":"Add weather variables and crop model application","title":"Monthly statistics","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"year_range = unique(year.(date_range))\nidx_year = [findall(x -> year.(x) == m, date_range) for m in year_range]\nidx_month = [findall(x -> month.(x) == m, date_range) for m in 1:12]\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_month]\nagg_fun(XX) = ifelse(XX == :RR, sum, mean)\nmonth_rain_simu = Dict(key => [monthly_agg(xx[j, :, i], idx_all, agg_fun(key)) for j in 1:D, i in 1:NSIMU] for (key, xx) in dicts_simu)\nmonth_rain_histo = Dict(key => [monthly_agg(@subset(df, :DATE .‚â• Date(1986)), key, agg_fun(key)) for df in data_stations] for key in vars)\n\nqs = [0.9, 0.5, 0.1]\n\n@time \"Plot monthly quantile\" begin\n    plt_month = Dict()\n    plts_month = Dict()\n    ylabel_string = Dict(:RR => L\"Cumulated Rain ($\\mathrm{m}\\mathrm{m}/\\mathrm{m}^2$)\", :TX => L\"$T_{\\mathrm{max}}$ (¬∞C)\", :TN => L\"$T_{\\mathrm{min}}$ (¬∞C)\", :QQ => L\"Solar irradiance (MJ/$\\mathrm{m}^2$)\", :ETPP => L\"Evapotranspiration ($\\mathrm{m}\\mathrm{m}/\\mathrm{m}^2$)\")\n    for XX in vars\n        plt_month[XX] = [plot(xtickfontsize=10, ytickfontsize=11, ylabelfontsize=12, legendfontsize=12, titlefontsize=12, foreground_color_legend=nothing) for j = 1:D]\n        for j = 1:D\n            for (Œ±, per) in enumerate([[0, 100], [25, 75]])\n                for (cc, q) in enumerate(qs)\n                    errorline!(plt_month[XX][j], [quantile(month_rain_simu[XX][j, i][:, m], q) for m in 1:12, i in 1:NSIMU], label=(Œ± == 1 ? islabel(j, 4, L\"Simu  $q_{%$(Int(q*100))}$\") : :none), fillalpha=0.18 * Œ±^2, centertype=:median, errortype=:percentile, percentiles=per, groupcolor=my_palette(length(qs))[cc])\n                end\n            end\n            for q in qs\n                scatter!(plt_month[XX][j], m -> quantile(skipmissing(month_rain_histo[XX][j][:, m]), q), 1:12, label=(q == qs[1] ? islabel(j, 3, \"Obs\") : :none), legend=:topleft, ms=2.5, c=:blue)\n                plot!(plt_month[XX][j], m -> quantile(skipmissing(month_rain_histo[XX][j][:, m]), q), 1:12, label=:none, c=:blue, lw=1.75)\n            end\n            xticks!(plt_month[XX][j], 1:12, string.(first.(monthabbr.(1:12))))\n            XX == :RR ? ylims!(plt_month[XX][j], 0, Inf) : nothing\n        end\n        [ylabel!(plt_month[XX][j], ylabel_string[XX]) for j in [1, 3]]\n\n        [title!(plt_month[XX][j], station_ndep[j]) for j = 1:D]\n        plts_month[XX] = plot(plt_month[XX]..., size=(1000, 700), left_margin=19px)\n    end\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Rainfall-RR-2","page":"Add weather variables and crop model application","title":"Rainfall RR","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plot(plts_month[:RR])","category":"page"},{"location":"examples/tuto_add_station_variable/#Temperature-max-TX-2","page":"Add weather variables and crop model application","title":"Temperature max TX","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_month[:TX]","category":"page"},{"location":"examples/tuto_add_station_variable/#Temperature-min-TN-2","page":"Add weather variables and crop model application","title":"Temperature min TN","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_month[:TN]","category":"page"},{"location":"examples/tuto_add_station_variable/#Solar-irradiance-QQ-2","page":"Add weather variables and crop model application","title":"Solar irradiance QQ","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_month[:QQ]","category":"page"},{"location":"examples/tuto_add_station_variable/#Evapotranspiration-ETPP-2","page":"Add weather variables and crop model application","title":"Evapotranspiration ETPP","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"plts_month[:ETPP]","category":"page"},{"location":"examples/tuto_add_station_variable/#Stochastic-Weather-Generator-Crop-model-STICS","page":"Add weather variables and crop model application","title":"Stochastic Weather Generator + Crop model STICS","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"In this section, we demonstrate how stochastic weather simulations can serve as inputs for a crop model to study the climate sensitivity of a crop model. This is a proof of concept showing how SWG can be useful when combine with other models.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Specifically, we use the STICS crop model[STICS]. To download STICS, go to this page (in French...) and follow these instructions:","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Register on the dedicated website, or log in if you already have an account.\nYou will receive an e-mail confirming the creation of your account.\nDownload files here after logging in","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"The download files will have","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"STICS executable, here we will use the lower level one stics_modulo and not the Java version which is slower. In this tutorial, we used the version STICS-10.0.0.\nParameter files of different crop.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"[STICS]: Brisson et al. (2003). An overview of the crop model STICS. European Journal of agronomy, 18(3-4), 309-332.","category":"page"},{"location":"examples/tuto_add_station_variable/#Description","page":"Add weather variables and crop model application","title":"Description","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"For this tutorial, we use the default STICS parameters for maize with the following modifications: no irrigation (to highlight the effect of hydric stress), pgrainmaxi = 0.35, and nbgrmin = 0, nbgrmax = 4500 (minimum and maximum number of fruits per m^2).","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Typically, the final yield ranges between 0 and 15 t/ha and is highly dependent on rainfall and temperature.","category":"page"},{"location":"examples/tuto_add_station_variable/#Running-STICS","page":"Add weather variables and crop model application","title":"Running STICS","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"In the file file_stics, we implemented functions to streamline calls to the STICS executable (either .exe or .sh), which can be obtained from the STICS downloads. For each simulation, the script updates the STICS weather files based on the input data frames (dfs_simus). It extracts the final yield (along with some other quantities not used here). If STICS encounters an error, the YIELD value is set to missing.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Since repeated calls to STICS are time-intensive, results are saved for reuse. Below, we show the executed code:","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"using Suppressor # to handle the STICS hard-printed output\n\nfile_for_stics_utilities = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_stics.jl\")\ninclude(file_for_stics_utilities)","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"stics_path = joinpath(STICS_PATH, \"JavaSTICS-1.5.1-STICS-10.0.0\", \"bin\", \"stics_modulo.exe\") # or stics_modulo for Linux\nwork_path = joinpath(\"stics_files\", \"maize\") # folder where all maize files are\n\n@time res_YIELDs = map(Iterators.product(1:300, 1:D)) do (i, j)\n    GC.gc() # empirically needed\n    @show i,j\n    run_stics_mod_yield(dfs_simus[i][j], infos=100, stics_path=stics_path, work_path=work_path).YIELD\nend\n# 15650.246490 seconds (1.03 G allocations: 108.568 GiB, 1.13% gc time, 0.01% compilation time: <1% of which was recompilation)\ncd(@__DIR__)\nJLD.save(\"results_yield.jld\", Dict(\"res_YIELDs\" => res_YIELDs))","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"file_yield = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/refs/heads/master/assets/tuto_2/results_yield.jld\")\nres_YIELDs = JLD.load(file_yield)[\"res_YIELDs\"]","category":"page"},{"location":"examples/tuto_add_station_variable/#Yield-distributions-with-uncertainty","page":"Add weather variables and crop model application","title":"Yield distributions with uncertainty","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"The following plot shows the typical distribution of maize yield at four location over a 50-year span. We added the envelope of these distributions to highlight uncertainty. Each location has a very different weather (see previous sections).","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"begin\n    plt_dist_yield = [plot(tickfont=13, legendfontsize=14, xlabelfontsize=16, ylabelfontsize=16, titlefontsize=16, legend=:topright) for j = 1:D]\n    for j in 1:D\n        dist_j = Vector{Vector{Float64}}(filter.(!ismissing, res_YIELDs[:, j]))\n\n        errorlinehist!(plt_dist_yield[j], dist_j, groupcolor=:gray, label=islabel(j, [1], L\"Simu $q_{0,100}$\"), norm=:pdf, errortype=:percentile, percentiles=[0, 100], fillalpha=0.5, centertype=:median)\n\n        errorlinehist!(plt_dist_yield[j], dist_j, groupcolor=:red, label=islabel(j, [1], L\"Simu $q_{25,75}$\"), norm=:pdf, errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n        xlims!(plt_dist_yield[j], 0, 16)\n    end\n    [xlabel!(plt_dist_yield[j], \"YIELD (t/ha)\") for j in [3, 4]]\n    [ylabel!(plt_dist_yield[j], \"PDF\") for j in [1, 3]]\n    station_ndep\n    [title!(plt_dist_yield[j], station_ndep[j]) for j = 1:D]\n\n    plts_dist_yield = plot(plt_dist_yield..., size=(1000, 700), bottom_margin=11px, left_margin=15px)\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Sensitivity-of-maize-on-rainfall-during-key-growth-periods","page":"Add weather variables and crop model application","title":"Sensitivity of maize on rainfall during key growth periods","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"To identify which rainfall period between April and October has the greatest impact on maize yield, we divide the growing season into four periods. For each period, we calculate the mean rainfall, both conditionally (blue) and unconditionally (orange), on final yields exceeding the median. Each distribution is displayed along with its interquartile range.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"For the selected station, the most critical period is from June 12 to July 27, as evidenced by the significant difference between the two distributions. Specifically, the mean rainfall, when conditioned on a high yield, is approximately 20% higher during this period. In contrast, for the other periods, the mean rainfall remains nearly identical, indicating a much lower sensitivity.","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"week_date = (date_begin=Date(1996, 4, 27), date_end=Date(1996, 10, 27), N_period=4)\ngroups = chunky(Dates.value(week_date.date_end - week_date.date_begin) + 1, week_date.N_period)\n\ndfs_stat = [[stats_fortnightly(dfsim, week_date, years) for dfsim in dfs_simus[i]] for i in axes(res_YIELDs, 1)]\nfor i in eachindex(dfs_stat)\n    for (j, df) in enumerate(dfs_stat[i])\n        @transform!(df, :YIELD = res_YIELDs[i, j])\n    end\nend\n\nbegin\n    j = 1 # station number\n    dfi = [dropmissing(dfs_stat[i][j]) for i in eachindex(dfs_stat)]\n    df_sub = [@subset(df, :YIELD .> quantile(:YIELD, 0.5)) for df in dfi]\n    plt_scat = [plot(legend=:topright, tickfont=14, legendfontsize=14, xlabelfontsize=14, ylabelfontsize=14, titlefontsize=14) for i in 1:week_date.N_period]\n    for i in 1:week_date.N_period\n        errorlinehist!(plt_scat[i], [dfi[ii][:, Symbol(\"MEAN_RR_$i\")] for ii in eachindex(dfi)], groupcolor=2, label=islabel(i, 1, L\"R\"), norm=:pdf, errortype=:percentile, percentiles=[25, 75], fillalpha=0.1, lw = 2, centertype=:median)\n\n        errorlinehist!(plt_scat[i], [df_sub[ii][:, Symbol(\"MEAN_RR_$i\")] for ii in eachindex(dfi)], groupcolor=1, label=islabel(i, 1, L\"R \\mid (\\mathrm{Yield} > \\mathrm{median})\"), norm=:pdf, errortype=:percentile, percentiles=[25, 75], fillalpha=0.1, lw = 2, centertype=:median)\n\n        # stephist!(plt_scat[i], dfi[:, Symbol(\"MEAN_RR_$i\")], label=islabel(i, 2, L\"R\"), norm=:pdf, lw=1.75)\n        # stephist!(plt_scat[i], df_sub[:, Symbol(\"MEAN_RR_$i\")], label=islabel(i, 2, L\"R \\mid (\\mathrm{Yield} > \\mathrm{median})\"), norm=:pdf, lw=1.75)\n        vline!([mean.([dfi[ii][:, Symbol(\"MEAN_RR_$i\")] for ii in eachindex(dfi)]) |> mean], label=:none, s=:dot, c=2, lw=2)\n        vline!([mean.([df_sub[ii][:, Symbol(\"MEAN_RR_$i\")] for ii in eachindex(dfi)]) |> mean], label=:none, s=:dot, c=1, lw=2)\n        period_range = period_range_func(groups[i])\n        title!(\"$(day(period_range[1])) $(monthabbr(period_range[1])) - $(day(period_range[2])) $(monthabbr(period_range[2]))\")\n        xlabel!(\"Rain (mm/period)\")\n        ylabel!(\"PDF\")\n\n    end\n    annotate!(plt_scat[3], 5.5, 1.1, station_ndep[j])\n    plt_sensitivity = plot(plt_scat..., size=(1000, 700), left_margin=3Plots.PlotMeasures.mm)\nend","category":"page"},{"location":"examples/tuto_add_station_variable/#Reproducibility","page":"Add weather variables and crop model application","title":"Reproducibility","text":"","category":"section"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"import InteractiveUtils\nInteractiveUtils.versioninfo()","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"Package list and version","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"import Pkg;\nPkg.status();\nnothing #hide","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"","category":"page"},{"location":"examples/tuto_add_station_variable/","page":"Add weather variables and crop model application","title":"Add weather variables and crop model application","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"EditURL = \"../../../examples/tuto_paper.jl\"","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"using Markdown#hide\nimport Pkg;\ncd(@__DIR__)#hide","category":"page"},{"location":"examples/tuto_paper/#Multisite-daily-Stochastic-Weather-Generator","page":"Paper","title":"Multisite daily Stochastic Weather Generator","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"This tutorial describes the numerical applications described in the paper Interpretable Seasonal Hidden Markov Model for spatio-temporal stochastic rain generation in France by Emmanuel Gobet (CMAP - √âcole Polytechnique), David M√©tivier (MISTEA ‚Äì INRAE) and Sylvie Parey (R&D ‚Äì EDF). It shows a fully reproducible example on how to use the package StochasticWeatherGenerators.jl to reproduce, step-by-step, exactly (almost) all the figures of the paper.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"The paper describes the construction of a Stochastic Weather Generator with an Autoregressive Seasonal Hidden Markov Model (SHMM). The SHMM is trained with French weather stations, and the hidden states are interpreted as weather regimes. The model is validated with simulations, especially for its ability to reproduce extreme weather, e.g. droughts. In the paper, the model is also used with Climate Change RCP scenarios (not shown here).","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"<img src=\"https://github.com/dmetivie/StochasticWeatherGenerators.jl/assets/46794064/5fe1d677-877d-4fd5-83ac-29d30f728ca5\" width=\"95%\" alt = \"Schematic of the Autoregressive Seasonal Hidden Markov Model\"/>","category":"page"},{"location":"examples/tuto_paper/#Set-up","page":"Paper","title":"Set up","text":"","category":"section"},{"location":"examples/tuto_paper/#Package-and-functions","page":"Paper","title":"Package and functions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"note: For Julia new user\nThere are several ways to add a package before using, one way is for this tutorial to copy-paste (it might take a while):import Pkg\nPkg.add([\"CSV\", \"JLD\", \"DelimitedFiles\", \"DataFrames\", \"DataFramesMeta\", \"StatsBase\", \"Random\", \"Distributions\", \"StatsPlots\", \"LaTeXStrings\"])","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"using CSV, JLD, DelimitedFiles # File Read/Load/Save\n\nusing DataFrames, DataFramesMeta # DataFrames\n\nusing Dates\n\nusing StatsBase, Random\n\nusing Distributions","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"The two main packages for this tutorial are not yet registered in the official Julia registry, since they are not quite fully ready. They can be either added through my local Julia registry with the LocalRegistry.jl package i.e.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"using Pkg\npkg\"registry add https://github.com/dmetivie/LocalRegistry\"\nPkg.add(\"SmoothPeriodicStatsModels\")\nPkg.add(\"StochasticWeatherGenerators\")","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Or directly on the master branch with added via url i.e.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"import Pkg\nPkg.add(url = \"https://github.com/dmetivie/SmoothPeriodicStatsModels.jl\")\nPkg.add(url = \"https://github.com/dmetivie/StochasticWeatherGenerators.jl\")","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"using SmoothPeriodicStatsModels # Name might change. Small collection of smooth periodic models e.g. AR, HMM\n\nusing StochasticWeatherGenerators # interface to use with SmoothPeriodicStatsModels.jl","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Random.seed!(1234)","category":"page"},{"location":"examples/tuto_paper/#Settings-for-plotting","page":"Paper","title":"Settings for plotting","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Some settings and packages to have nice plots.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"using StatsPlots, LaTeXStrings\nusing StatsPlots.PlotMeasures # To play with margin in Plots\n\ngr() # plotly() # for interactive plots\ndefault(fontfamily=\"Computer Modern\")\ncur_colors = get_color_palette(:auto, 100);\nmy_palette(K) = palette(vcat(cur_colors[1], [cur_colors[c] for c in 3:4], cur_colors[2]), K)\n\nfile_for_plot_utilities = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_plot.jl\")\ninclude(file_for_plot_utilities)","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"To plot maps, we use GeoMakie.jl + NaturalEarth.jl. Note that using cartopy with PyCall.jl also works very well.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"For the following code to work you will need to add the following packages","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"import Pkg\nPkg.add(\"NaturalEarth\", \"GeoMakie\", \"CairoMakie\")","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"file_for_maps_with_geomakie = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_geo_makie_features.jl\") # download file from a GitHub repo\ninclude(file_for_maps_with_geomakie)","category":"page"},{"location":"examples/tuto_paper/#Global-Parameters","page":"Paper","title":"Global Parameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Number of days in a year (choice here is 366)","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"T = 366","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Define the French area for map (Longitude and latitude) plot and the precision of the map precision_scale","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"precision_scale = 50 # meter\n\nLON_min = -5 # West\n\nLON_max = 10 # East\n\nLAT_min = 41 # South\n\nLAT_max = 52 # North","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"conversion_factor for rain amounts RR in 0.1 mm to mm","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"conversion_factor = 0.1 # 0.1 mm -> mm","category":"page"},{"location":"examples/tuto_paper/#HMM-Hyperparameters","page":"Paper","title":"HMM Hyperparameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Number of hidden states","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"K = 4\n\nmy_pal = my_palette(K); # just colors I like for plotting weather regime!\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Degree ùêÉùêûùê† of the trigonometric expansion It could be an array different for each station and variable. Not implemented yet though.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"ùêÉùêûùê† = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Local memory order i.e. at station j, mathbbP(Y_n^(j) = y_n^(j) mid Z = k Y_n-1n-textttlocal memory^(j) = y_n-1n-textttlocal memory^(j))","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"local_order = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"note: Note\nThe local_order and/or ùêÉùêûùê† could be a vector/matrix of size D and different for each station, and also different depending on wet or dry past. Not yet implemented.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"size_order = 2^local_order\n\nprintln(\"K = $K, \", \"local_order = $local_order, \", \"degree = $ùêÉùêûùê†\")","category":"page"},{"location":"examples/tuto_paper/#Data","page":"Paper","title":"Data","text":"","category":"section"},{"location":"examples/tuto_paper/#Select-relevant-stations-from-the-station.txt-file","page":"Paper","title":"Select relevant stations from the station.txt file","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Here we","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Remove white space at the right of the CN, STANAME which is caused by imperfect CVS importation\nSelect only the stations with 100% valid data for the period Date(1955,12,31) .‚â§ :DATE .‚â§ Date(2019,12,31)\nShorten station names","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    station_file = Base.download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/weather_files/stations.txt\")\n    station_all = CSV.read(station_file, DataFrame, header=18, normalizenames=true, ignoreemptyrows=true)\n    station_all = @chain station_all begin\n        @transform(:CN = rstrip.(:CN), :STANAME = rstrip.(:STANAME))\n        # @subset(:CN .‚àà tuple([\"FR\", \"BE\", \"LU\", \"CH\"])) # Choose that if you want to look at all stations in France, Belgium, Luxembourg and Switzerland.\n        @subset(:STAID .‚àà tuple([32, 33, 34, 36, 39, 203, 322, 323, 434, 736, 737, 738, 740, 742, 745, 749, 750, 755, 756, 757, 758, 786, 793, 2192, 2203, 2205, 2207, 2209, 11244, 11245, 11247, 11249]))\n        @transform(:STANAME = shortname.(:STANAME))\n    end\nend\n\nselected_station_name = [\"BOURGES\", \"TOULOUSE\", \"MARIGNANE\", \"LUXEMBOURG\", \"LILLE\", \"EMBRUN\", \"BASTIA\", \"LA HAGUE\", \"CHASSIRON\", \"ORLY\"]","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"note: Hypothesis: Conditional Independence of Rain Occurrences\nYou can change the selected stations. However, keep in mind that for the model to work, the conditional independence hypothesis must hold between stations i.e. mathbbP(Y_1 = y_1 cdots Y_S = y_smid Z = k) = prod_s=1^S mathbbP(Y_s = y_s). Hence stations must be sufficiently far apart. Check out this MNIST example to see Bernoulli mixtures in action!","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"station = @subset(station_all, :STANAME .‚àà tuple(selected_station_name))\n\nSTAID = station.STAID #[32, 33, 39, 203, 737, 755, 758, 793, 11244, 11249];\n\nstation_name = station.STANAME","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Sort stations (index) by latitude. It is useful for plotting from North to South.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"staid_lat = sortperm(station.LAT, rev=true);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Station number","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"D = length(STAID)","category":"page"},{"location":"examples/tuto_paper/#Date-range","page":"Paper","title":"Date range","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"date_start = Date(1956)","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Date including the previous days used in the initial condition (in case local_memory > 0)","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"date_start_w_memory = date_start - Day(local_order)\n\ndate_end = Date(2020) - Day(1)\n\nevery_year = date_start:Day(1):date_end\n\nevery_year_w_memory = date_start_w_memory:Day(1):date_end\n\nn2t = dayofyear_Leap.(every_year)\n\nN = length(n2t)","category":"page"},{"location":"examples/tuto_paper/#Treat-data","page":"Paper","title":"Treat data","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Load into a DataFrame the (ECA) RR files (rain). It filters by date and valid data. It also adds a column :RO for rain occurrences (0: dry, 1: wet).","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    data_stations = collect_data_ECA.(STAID, date_start_w_memory, date_end, \"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/weather_files/ECA_blend_rr/RR_\", portion_valid_data=1, skipto=22, header=21, url=true)\n    for i = eachindex(data_stations)\n        @transform!(data_stations[i], :RO = onefy.(:RR))\n    end\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Binary matrix version of the rain event at the D stations.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Yall = BitMatrix(reduce(hcat, [data_stations[j].RO for j = 1:D]))\n\nY_past = BitMatrix(Yall[1:local_order, :]) # rand(Bool, local_order, D)\n\nŒæ = [1; zeros(K - 1)];  # 1 jan 1956 was most likely a type Z = 1 wet day all over France\n\nY = Yall[1+local_order:end, :]","category":"page"},{"location":"examples/tuto_paper/#Map-of-stations","page":"Paper","title":"Map of stations","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Convert LAT/LON coordinates from DMS to DD which seems most widely accepted format.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"LAT_idx = dms_to_dd.(station.LAT)\n\nLON_idx = dms_to_dd.(station.LON)\n\nlong_spell = [longuest_spell(y) for y in eachcol(Y)]\n\nFR_map_spell = map_with_stations(LON_idx, LAT_idx, long_spell; station_name=station_name, show_value=true, colorbar_show=true, precision_scale = precision_scale, colorbar_label = \"Days\")","category":"page"},{"location":"examples/tuto_paper/#Fit-the-seasonal-HMM","page":"Paper","title":"Fit the seasonal HMM","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"note: Hypothesis: Smooth parameter evolution\nWe assume all models e.g. HMM, rain mixture to have parameters evolving smoothly with periodicity T for t in 1 T. For example a Bernoulli parameter will writep(t) = dfrac11 + e^P(t) in 0 1with    P_c(t) = c_0 + sum_j=1^textttDeg left(c_2j-1cosleft(dfrac2piTj tright) + c_2jsinleft(dfrac2piTj tright)right)","category":"page"},{"location":"examples/tuto_paper/#Fit-slice:-naive-estimation","page":"Paper","title":"Fit slice: naive estimation","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"note: Note\nBefore inferring the HMM parameters with the EM (Baum-Welch) algorithm, we do a first naive inference that will be used as initial condition for the EM.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"The reference station ref_station is used to sort the hidden states obtained via the slide initialization Here we choose j=1 to STAID=32 to BOURGES because it is a central station for France","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"ref_station = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"This generates a random Periodic HMM that we then fit slice by slice (day by day). See paper.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"hmm_random = randARPeriodicHMM(K, T, D, local_order; Œæ=Œæ, ref_station=ref_station);\n\n@time \"FitMLE SHMM (Slice)\" hmm_slice = fit_mle_all_slices(hmm_random, Y, Y_past; n2t=n2t, robust=true, rand_ini=true, Dirichlet_Œ±=0.8, history=false, n_random_ini=1, Y‚Çú_extanted=[-12, -7, 0, 6, 13]);\n\nŒ∏·¥¨_slice, Œ∏·¥Æ_slice = fit_Œ∏!(hmm_slice, ùêÉùêûùê†);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Fit-with-Baum-Welch-using-the-slice-estimate-as-a-starting-point","page":"Paper","title":"Fit with Baum Welch using the slice estimate as a starting point","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"With the Slice estimate as a good starting point for the full (seasonal) Baum Welch EM algorithm we fit the model!","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"tip: Tip\nTo accelerate the fitting procedure (especially for larger models or when testing various model hyperparameters), one can dousing Distributed\naddprocs(10) # number of worker to add\n@everywhere using SmoothPeriodicStatsModels # load the pkg on each workerThen the fitting loop inside fit_mle will be distributed. See the official Julia doc for more info. On smaller models it does not worth it since adding workers add some compilation and communication time.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"@time \"FitMLE SHMM (Baum Welch)\" hmm_fit, Œ∏q_fit, Œ∏y_fit, hist, histo_A, histo_B = fit_mle(hmm_slice, Œ∏·¥¨_slice, Œ∏·¥Æ_slice, Y, Y_past,\n    maxiter=10000, robust=true; display=:final, silence=true, tol=1e-3, Œ∏_iters=true, n2t=n2t);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Uncomment to load a previously computed hmm","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"# hmm_infos = load(\"save_tuto_path/hmm_fit.jld\")\n# hmm_fit = hmm_infos[\"hmm\"]\n# hist = hmm_infos[\"hist\"]\n# Œ∏q_fit = hmm_infos[\"Q_param\"]\n# Œ∏y_fit = hmm_infos[\"Y_param\"]","category":"page"},{"location":"examples/tuto_paper/#Visualization-of-the-HMM-parameters","page":"Paper","title":"Visualization of the HMM parameters","text":"","category":"section"},{"location":"examples/tuto_paper/#Transition-matrix","page":"Paper","title":"Transition matrix","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    pA = [plot(legendfont=14, foreground_color_legend=nothing, background_color_legend=nothing, legend_columns=4, tickfont=12, legendfontsize=16) for k in 1:K]\n    for k in 1:K\n        [plot!(pA[k], hmm_fit.A[k, l, :], c=my_color(l, K), label=L\"Q_{%$(k)\\to %$(l)}\", legend=:top, lw=1.75) for l in 1:K]\n        hline!(pA[k], [0.5], c=:black, label=:none, s=:dot)\n        xticks!(pA[k], vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366), vcat(string.(monthabbr.(1:12)), \"\"), xlims=(0, 367), ylims=(0, 1))\n    end\n    pallA = plot(pA..., size=(1000, 500))\nend","category":"page"},{"location":"examples/tuto_paper/#Rain-probabilities","page":"Paper","title":"Rain probabilities","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    mm = 1\n    jt = D\n    pB = [plot(legendfont=14, title=\"$(station_name[j])\", titlefontsize=17, tickfont=14, legendfontsize = 16) for j in 1:jt]\n    for j in 1:jt\n        [plot!(pB[j], succprob.(hmm_fit.B[k, :, j, mm]), c=my_color(k, K), label=islabel(j, 3, L\"\\mathbb{P}(Y = \\textrm{wet}\\mid Z = %$k, H = \\textrm{dry})\"), lw=2) for k in 1:K]\n        hline!(pB[j], [0.5], c=:black, label=:none, s=:dot)\n        xticks!(\n            pB[j],\n            vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366),\n            vcat(string.(first.(monthabbr.(1:12))))\n        )\n        xlims!(pB[j], (0, 367))\n        ylims!(pB[j], (0, 1))\n    end\n    pallB = plot(pB[staid_lat]..., size=(3000 / 2, 1000 / 1), layout=(2, 5))\nend","category":"page"},{"location":"examples/tuto_paper/#Spatial-Rain-probability","page":"Paper","title":"Spatial Rain probability","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"memory_past_cat = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"h = 1 (day before dry) or 2 (day before wet) mathbbP(Y = textRainmid Z = k H = h) with h = memory_past_cat","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"For now there are some scale rendering issues due to an GeoMakie.jl issue so it might be tiny.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"p_FR_map_mean_prob = map_with_stations(LON_idx, LAT_idx, [[mean(succprob.(hmm_fit.B[k, :, j, memory_past_cat])) for j in 1:length(STAID)] for k in 1:K], colorbar_show=true, colorbar_label = L\"\\mathbb{P}(Y = \\text{Rain}\\mid Z = k, H = 1)\", precision_scale = precision_scale)","category":"page"},{"location":"examples/tuto_paper/#Inference-of-the-historical-hidden-states","page":"Paper","title":"Inference of the historical hidden states","text":"","category":"section"},{"location":"examples/tuto_paper/#Viterbi-algorithm","page":"Paper","title":"Viterbi algorithm","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"zÃÇ = viterbi(hmm_fit, Y, Y_past; n2t=n2t)\n\ndata_stations_z = map(data_stations) do df\n    @transform(df, :z = [fill(missing, local_order); zÃÇ])\nend\n\nzÃÇ_per_cat = [findall(zÃÇ .== k) for k in 1:K]","category":"page"},{"location":"examples/tuto_paper/#Visualization-of-the-historical-sequences-of-hidden-states","page":"Paper","title":"Visualization of the historical sequences of hidden states","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"year_range = unique(year.(data_stations[1][1+local_order:end, :DATE]));\n\nidx_year = [findall(x -> year.(x) == m, data_stations[1][1+local_order:end, :DATE]) for m in year_range];\n\nselect_year = unique(sort([4:10:length(year_range); 21; 48; 64]))\n\nbegin\n    year_nb = length(select_year)\n    z_hat_mat = zeros(year_nb, 366)\n\n    for (i, y) in enumerate(select_year)\n        if isleapyear(year_range[y])\n            z_hat_mat[i, :] = zÃÇ[idx_year[y]]\n        else\n            z_hat_mat[i, :] = [zÃÇ[idx_year[y]]; 0]\n        end\n    end\n    thick = 1\n    heatmap(z_hat_mat, colorbar=:none, c=my_palette(K), minorticks=:false, framestyle=:xbox, grid=:none, thickness_scaling=thick)\n    xticks!(vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366), vcat(string.(monthabbr.(1:12)), \"\"), xlims=(0, 367), xtickfontsize=14 / thick, ytickfontsize=14 / thick)\n    hline!((1:year_nb) .+ 0.5, c=:black, legend=:none, lw=4)\n    ylims!(0.5, year_nb + 0.5)\n    pviterbi = yticks!(1:year_nb, string.(year_range[select_year]), size=(1000, 600))\nend","category":"page"},{"location":"examples/tuto_paper/#Adding-Rain-amounts-to-the-model","page":"Paper","title":"Adding Rain amounts to the model","text":"","category":"section"},{"location":"examples/tuto_paper/#Marginal-distribution","page":"Paper","title":"Marginal distribution","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"We fit the marginals of the rain amount R0 at each station s and for each hidden state Z independently. We use a mixture of exponential functions","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"g(r) = w dfrace^-frac rvartheta_1vartheta_1 + (1-w)  dfrace^-frac rvartheta_2vartheta_2","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"whose parameters w(t), vartheta_1(t) and vartheta_2(t) are smooth periodic functions of the day of the year.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"@time \"FitMLE RR\" mix_allE = fit_mle_RR.(data_stations_z, local_order, mix‚ÇÄ=StochasticWeatherGenerators.mix_ini(T));\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Thanks to Distributions.jl PR #1389 (September 2nd, 2021) and Julia multiple dispatch, the quantile function of Mixtures can be very efficiently computed.","category":"page"},{"location":"examples/tuto_paper/#Rain-correlations","page":"Paper","title":"Rain correlations","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"We fit a Gaussian copula to each pair of stations for joint rainy days only.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"warning: Warning\nFor some hidden states corresponding to dry weather, it might happen that for some pair of stations, there are not enough simultaneous rain occurrences in a rain category Z = k to estimate a correlation coefficient. In that case a missing coefficient is returned by cov_RR or it returns the value impute_missing if specified (to avoid missing). The option force_PosDef (enabled by default) ensures having positive definite matrix. This is necessary to use gaussian copula.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Œ£¬≤RR = cov_RR(data_stations_z, K)","category":"page"},{"location":"examples/tuto_paper/#Simulation","page":"Paper","title":"Simulation","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Now we are ready to generate samples from the SWG model.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Nb is the number of realization","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Nb = 1000","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Sample the (seasonal) HMM model and output the sequence of hidden states and multi-site dry/wet.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    zs = zeros(Int, N, Nb)\n    ys = zeros(Bool, N, D, Nb)\n    @time \"Simulations Z, Y\" for i in 1:Nb\n        zs[:, i], ys[:, :, i] = rand(hmm_fit, n2t; y_ini=Yall[1:local_order, :], z_ini=1, seq=true)\n    end\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Given the hidden states and dry/wet, it generates the rain amounts at each station (correlated with a Gaussian Copula).","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    rs = zeros(D, N, Nb)\n    @time \"Simulations RR>0\" for i in 1:Nb\n        rs[:, :, i] = rand_RR(mix_allE, n2t, zs[:, i], ys[:, :, i]', Œ£¬≤RR)\n    end\nend","category":"page"},{"location":"examples/tuto_paper/#Results","page":"Paper","title":"Results","text":"","category":"section"},{"location":"examples/tuto_paper/#Spell-distribution","page":"Paper","title":"Spell distribution","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"select_month to choose the month where to compute the spell distributions (summer month, winter, etc.) select_month = 1:12 corresponds to all months.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"select_month = 1:12\n\nidx_months = [findall(x -> month.(x) == m, data_stations[1][1+local_order:end, :DATE]) for m in 1:12]\n\nidx_month_vcat = vcat(idx_months[select_month]...)\n\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_months];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Historic-spells","page":"Paper","title":"Historic spells","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"len_spell_hist = [pmf_spell(Y[idx_month_vcat, j], dw) for j in 1:D, dw in 0:1];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Simulation-spells","page":"Paper","title":"Simulation spells","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"len_spell_simu = [pmf_spell(ys[idx_month_vcat, j, i], dw) for i in 1:Nb, j in 1:D, dw in 0:1];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Dry-spell","page":"Paper","title":"Dry spell","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"make_range(y, step=1) = range(extrema(y)..., step=step)\n\nbegin\n    dry_or_wet = 1 # dry\n    p_spell_dry = [plot(ylims=(1e-4, 1e-0), tickfont=11, legendfontsize=13) for j = 1:D]\n    for j = 1:D\n        all_spells = len_spell_simu[:, j, dry_or_wet]\n        errorlinehist!(p_spell_dry[j], all_spells, groupcolor=:grey, legend=:topright, label=islabel(j, staid_lat[[1]], L\"Simu $q_{0,100}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n        errorlinehist!(p_spell_dry[j], all_spells, groupcolor=:red, label=islabel(j, staid_lat[[1]], L\"Simu $q_{25,75}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n        histo_spell = len_spell_hist[j, dry_or_wet]\n        errorlinehist!(p_spell_dry[j], [histo_spell], label=islabel(j, staid_lat[[1]], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:probability, bins=make_range(histo_spell), errortype=:percentile)\n        xlims!(p_spell_dry[j], 0, 2 + maximum(1.5maximum.(histo_spell)))\n        yaxis!(:log10)\n    end\n\n    [xlabel!(p_spell_dry[j], \"Nb of days\", xlabelfontsize=12) for j in staid_lat[6:10]]\n    [ylabel!(p_spell_dry[j], \"PMF\", ylabelfontsize=12) for j in staid_lat[[1, 6]]]\n    [title!(p_spell_dry[j], station_name[j], titlefontsize=13) for j = 1:D]\n    pall_spell_dry = plot(p_spell_dry[staid_lat]..., size=(3000 / 2.5, 1000 / 1.5), layout=(2, 5), left_margin=0.5cm, bottom_margin=0.275cm)\nend","category":"page"},{"location":"examples/tuto_paper/#Wet-spell","page":"Paper","title":"Wet spell","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    dry_or_wet = 2 # wet\n    p_spell_wet = [plot(ylims=(1e-4, 1e-0), tickfont=11, legendfontsize=13) for j = 1:D]\n    for j = 1:D\n        all_spells = len_spell_simu[:, j, dry_or_wet]\n        errorlinehist!(p_spell_wet[j], all_spells, groupcolor=:grey, legend=:topright, label=islabel(j, staid_lat[[1]], L\"Simu $q_{0,100}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n        errorlinehist!(p_spell_wet[j], all_spells, groupcolor=:red, label=islabel(j, staid_lat[[1]], L\"Simu $q_{25,75}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n        histo_spell = len_spell_hist[j, dry_or_wet]\n        errorlinehist!(p_spell_wet[j], [histo_spell], label=islabel(j, staid_lat[[1]], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:probability, bins=make_range(histo_spell), errortype=:percentile)\n        xlims!(p_spell_wet[j], 0, 2 + maximum(1.5maximum.(histo_spell)))\n        yaxis!(:log10)\n    end\n\n    [xlabel!(p_spell_wet[j], \"Nb of days\", xlabelfontsize=12) for j in staid_lat[6:10]]\n    [ylabel!(p_spell_wet[j], \"PMF\", ylabelfontsize=12) for j in staid_lat[[1, 6]]]\n    [title!(p_spell_wet[j], station_name[j], titlefontsize=13) for j = 1:D]\n    pall_spell_wet = plot(p_spell_wet[staid_lat]..., size=(3000 / 2.5, 1000 / 1.5), layout=(2, 5), left_margin=0.5cm, bottom_margin=0.275cm)\nend","category":"page"},{"location":"examples/tuto_paper/#Rain","page":"Paper","title":"Rain","text":"","category":"section"},{"location":"examples/tuto_paper/#Interpretation:-Mean-Rain-per-weather-regime-R-0-\\mid-Z-k.","page":"Paper","title":"Interpretation: Mean Rain per weather regime R  0 mid Z = k.","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"We plot the empirical (strictly) positive mean rain amounts per weather regime. The results are smoothed using a cyclic_moving_average with a time window of pm 15 days and the Epanechnikov kernel.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    p_rainpercat = [plot(tickfont=12, ylabelfontsize=14, titlefontsize=14, legendfontsize=13) for j = 1:D]\n    for j = 1:D\n        df_j = @chain data_stations_z[j] begin\n            dropmissing\n            @transform(:day = dayofyear_Leap.(:DATE))\n            @subset(:RR .> 0)\n            @by([:day, :z], :MEAN_RR = mean(:RR))\n            groupby(:z)\n        end\n        # Uncomment to see how the double exponential mixtures compare to the empirical data.\n        # [plot!(p_rainpercat[j], 1:T, t -> conversion_factor * mean(mix_allE[j][k, t]), label=:none, c=my_color(k, K), lw=1.5, legend = :topleft) for k in 1:K]\n        for k in 1:K\n            cycle_avg = replace(cyclic_moving_average(df_j[k].MEAN_RR, df_j[k].day, T, 15), 0 => missing)\n            @df df_j[k] plot!(p_rainpercat[j], 1:T, conversion_factor * cycle_avg, c=my_color(k, K), alpha=1, label=islabel(j, staid_lat[[4]], L\"Z = %$k\"), lw=1.5)\n        end\n        ylims!(p_rainpercat[j], 0, Inf)\n    end\n    [ylabel!(p_rainpercat[j], L\"Rain (mm/m$^2$)\") for j in staid_lat[[1, 6]]]\n    [xticks!(\n        p_rainpercat[j],\n        vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366),\n        vcat(string.(first.(string.(monthabbr.(1:12)))))\n    ) for j in 1:D]\n    [title!(p_rainpercat[j], station_name[j]) for j = 1:D]\n    plt_rain_cat_mix = plot(p_rainpercat[staid_lat]..., size=(3000 / 2.2, 1000 / 1.5), layout=(2, 5), left_margin=25px)\nend","category":"page"},{"location":"examples/tuto_paper/#Univariate-Rain-distributions","page":"Paper","title":"Univariate Rain distributions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Historical vs Nb simulations distribution","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"begin\n    p_uniR = [plot(yaxis=:log10, ylims=(1e-4, 1e-0), tickfont=11, legendfontsize=13, titlefontsize=13) for j = 1:D]\n    for j = 1:D\n        dists_RR_positive_j = conversion_factor * [filter(!iszero, rs[j, :, i]) for i in 1:Nb]\n        errorlinehist!(p_uniR[j], dists_RR_positive_j, groupcolor=:grey, legend=:topright, label=islabel(j, staid_lat[[1]], L\"Simu $q_{0,100}$\"), norm=:pdf, errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n        errorlinehist!(p_uniR[j], dists_RR_positive_j, groupcolor=:red, label=islabel(j, staid_lat[[1]], L\"Simu $q_{25,75}$\"), norm=:pdf, errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n        errorlinehist!(p_uniR[j], [conversion_factor * filter(!iszero, data_stations[j].RR)], label=islabel(j, staid_lat[[1]], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:pdf, errortype=:percentile)\n\n        xlims!(p_uniR[j], 0.0, Inf)\n    end\n    [plot!(p_uniR[j], xlabel=L\"Rain (mm/m$^2$)\") for j in staid_lat[6:10]]\n    [plot!(p_uniR[j], ylabel=\"PDF\") for j in staid_lat[[1, 6]]]\n\n    [title!(p_uniR[j], station_name[j]) for j = 1:D]\n\n    pall_R = plot(p_uniR[staid_lat]..., size=(3000 / 2.5, 1000 / 1.5), layout=(2, 5), bottom_margin=11px, left_margin=15px)\nend","category":"page"},{"location":"examples/tuto_paper/#Monthly-quantile-amount","page":"Paper","title":"Monthly quantile amount","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"rh = reduce(hcat, [df[1+local_order:end, :RR] for df in data_stations])\n\nmonth_rain_simu = [monthly_agg(rs[j, :, i], idx_all) for j in 1:D, i in 1:Nb];\n\nmonth_rain_histo = [monthly_agg(rh[:, j], idx_all) for j in 1:D]\n\nqs = [0.9, 0.5, 0.1]\n\n@time \"Plot monthly quantile\" begin\n    p_month_RR = [scatter(xtickfontsize=10, ytickfontsize=11, ylabelfontsize=12, legendfontsize = 12, foreground_color_legend=nothing) for j = 1:D]\n    for j = 1:D\n        for (Œ±, per) in enumerate([[0, 100], [25, 75]])\n            for (cc, q) in enumerate(qs)\n                errorline!(p_month_RR[j], [quantile(month_rain_simu[j, i][:, m], q) * conversion_factor for m in 1:12, i in 1:Nb], label=(Œ± == 1 ? islabel(j, 9,L\"Simu  $q_{%$(Int(q*100))}$\") : :none), fillalpha=0.18 * Œ±^2, centertype=:median, errortype=:percentile, percentiles=per, groupcolor=my_palette(length(qs))[cc])\n            end\n        end\n        for q in qs\n            scatter!(p_month_RR[j], m -> quantile(month_rain_histo[j][:, m], q) * conversion_factor, 1:12, label=(q == qs[1] ? islabel(j, 3,\"Obs\") : :none), legend = :topleft, ms=2.5, c=:blue)\n            plot!(p_month_RR[j], m -> quantile(month_rain_histo[j][:, m], q) * conversion_factor, 1:12, label=:none, c=:blue, lw=1.75)\n        end\n        xticks!(p_month_RR[j], 1:12, string.(first.(monthabbr.(1:12))))\n        ylims!(p_month_RR[j], 0, Inf)\n    end\n    [ylabel!(p_month_RR[j], L\"Rain (mm/m$^2$)\") for j in staid_lat[[1, 6]]]\n\n    [title!(p_month_RR[j], station_name[j], titlefontsize=12) for j = 1:D]\n    pall_month_RR = plot(p_month_RR[staid_lat]..., size=(1190, 500), layout=(2, 5), left_margin=19px)\nend","category":"page"},{"location":"examples/tuto_paper/#Correlations","page":"Paper","title":"Correlations","text":"","category":"section"},{"location":"examples/tuto_paper/#Rain-event-dry/wet","page":"Paper","title":"Rain event dry/wet","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"cor_bin_hist = cor(reduce(hcat, [df.RO for df in data_stations]));\n\ncor_bin_mean_simu = mean(cor(ys[:, :, i]) for i in 1:Nb);\n\n\nbegin\n    plots_cor_bin = [plot(-0.1:0.1:0.8, -0.1:0.1:0.8, aspect_ratio=true, label=:none, xlabelfontsize=16, ylabelfontsize=16, tickfont=11, legendfontsize=13) for _ in 1:1]\n    scatter!(plots_cor_bin[1], vec_triu(cor_bin_hist), vec_triu(cor_bin_mean_simu), label=\"Correlations\", xlabel=\"Observations\", ylabel=\"Simulations\", c=2)\n    [xlims!(plots_cor_bin[i], -0.1, 1) for i in 1:1]\n    [ylims!(plots_cor_bin[i], -0.1, 1) for i in 1:1]\n    annotate!(0.2, 0.7, \"MSE ‚âÉ $(round(mean(abs2, vec_triu(cor_bin_hist) - vec_triu(cor_bin_mean_simu)), digits = 4))\")\n    plot_cor_bin = plot(plots_cor_bin...)\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"The largest pair correlation error for rain occurence comes from the pair","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"println(\"$(station_name[findmax(cor_bin_hist - cor_bin_mean_simu)[2][1]]) and $(station_name[findmax(cor_bin_hist - cor_bin_mean_simu)[2][2]])\")","category":"page"},{"location":"examples/tuto_paper/#Rain-amount","page":"Paper","title":"Rain amount","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"cor_hist = cor(reduce(hcat, [df.RR for df in data_stations]));\n\ncorT_hist = corTail(reduce(hcat, [df.RR for df in data_stations]));\n\ncor_mean_simu = mean(cor(rs[:, :, i]') for i in 1:Nb);\n\ncorT_mean_simu = mean(corTail(rs[:, :, i]') for i in 1:Nb);\n\nbegin\n    plots_cor = [plot(-0.1:0.1:0.8, -0.1:0.1:0.8, aspect_ratio=true, label=:none, xlabelfontsize=16, ylabelfontsize=16, tickfont=11, legendfontsize=13) for _ in 1:2]\n    scatter!(plots_cor[1], vec_triu(cor_hist), vec_triu(cor_mean_simu), label=\"Correlations\", xlabel=\"Observations\", ylabel=\"Simulations\", c=2)\n    annotate!(plots_cor[1], 0.3, 0.7, \"MSE ‚âÉ $(round(mean(abs2, vec_triu(cor_hist) - vec_triu(cor_mean_simu)), digits = 4))\")\n\n    scatter!(plots_cor[2], vec_triu(corT_hist), vec_triu(corT_mean_simu), label=\"Tail index\", xlabel=\"Observations\", ylabel=\"Simulations\", c=3)\n    annotate!(plots_cor[2], 0.3, 0.7, \"MSE ‚âÉ $(round(mean(abs2, vec_triu(corT_hist) - vec_triu(corT_mean_simu)), digits = 4))\")\n\n    [xlims!(plots_cor[i], -0.1, 1) for i in 1:2]\n    [ylims!(plots_cor[i], -0.1, 1) for i in 1:2]\n    plot_cor_all = plot(plots_cor..., size=(800, 400), left_margin=15px, right_margin = 8px)\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"The largest pair correlation error for rain (zero and non zero amounts) comes from the pair","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"println(\"$(station_name[findmax(cor_hist - cor_mean_simu)[2][1]]) and $(station_name[findmax(cor_hist - cor_mean_simu)[2][2]])\")","category":"page"},{"location":"examples/tuto_paper/#Gaussian-copula-hypothesis","page":"Paper","title":"Gaussian copula hypothesis","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"For a pair of stations, we transform the marginal R_s0 to mathcalN(01). We compare the obtained bi-variate Normal distribution with the Mahalanobis distance to the theoretical chi^2(2)-distriubtion.","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"corŒ£ = cov2cor.(Œ£¬≤RR)\nbegin\n    j1 = 10\n    j2 = 8\n    plt_qqp_copula = plot(0:25, 0:25, aspect_ratio=:equal, legendfontsize=14, c=:black, label=:none, tickfont=12, ylabelfontsize=13, xlabelfontsize=13)\n    df_12 = leftjoin(data_stations_z[j1], data_stations_z[j2], on=:DATE, makeunique=true)\n    @subset!(df_12, :RR .> 0, :RR_1 .> 0)\n    for k in 1:K\n        df_X = @chain df_12 begin\n            @subset(:z .== k)\n            dropmissing\n            @aside u = StochasticWeatherGenerators.Copulas.pseudos(permutedims(hcat(_.RR, _.RR_1)))\n            @transform(:X = quantile(Normal(), u[1,:]), :X_1 = quantile(Normal(), u[2,:]))\n        end\n        X = hcat(df_X.X, df_X.X_1)\n        cor_sigma = [1 corŒ£[k][j1,j2]; corŒ£[k][j1,j2] 1]\n        Œ£‚Åª¬π = inv(cor_sigma)\n\n        X2 = [(x' * Œ£‚Åª¬π * x) for x in eachrow(X)] |> sort\n        ecdfX2 = ecdf(X2)(X2) * length(X2) / (length(X2) + 1)\n\n        plot!(quantile(Chisq(2), ecdfX2), X2, xlabel=L\"$\\chi^2(2)$-quantile\", c=my_color(k, K), ylabel=\"Observed squared Mahalanobis distance\", label=L\"Z = %$k \", legend=:topleft, lw=2)\n    end\n    title!(\"$(station_name[j1])-$(station_name[j2]) $(ifelse(j1 == 10 && j2 == 8, \"(334 km)\", \"\"))\")\n    xlims!(0, 22)\n    ylims!(0, 22)\nend","category":"page"},{"location":"examples/tuto_paper/#Reproducibility","page":"Paper","title":"Reproducibility","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"using InteractiveUtils\nInteractiveUtils.versioninfo()","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"Package list and version","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"import Pkg; Pkg.status()","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"","category":"page"},{"location":"examples/tuto_paper/","page":"Paper","title":"Paper","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#StochasticWeatherGenerators.jl","page":"Home","title":"StochasticWeatherGenerators.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nPackage in construction! ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package, to define, fit and use Stochastic Weather Generators (SWG).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, the package offers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The daily multisite rain SWG proposed in the Interpretable Seasonal Hidden Markov Model for spatio-temporal stochastic rain generation in France paper. This SWG relies on a \"Seasonal Autoregressive Hidden Markov Models\" (SHMM) with interpretable hidden states. Note that the seasonal models HMM, AR etc are currently implemented in a separate package SmoothPeriodicStatsModels.jl.\nThe possibility to add stations to the SHMM and variables w.r.t. the hidden states. In particular, a multisite SWG with 5 weather variables (Rain, Temperature Max, Temperature Min, Evapotranspiration, Solar Irradiance) was tested. The structure of the added variables is very simplistic but do the job for the proof of concept. See the associated tutorial in the documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe objective of this package is not only to show my model, but also to propose several classic (and newer) SWG model. Hence, feel free to open an issue or open PR with ideas and models. This would allow easy model comparison and, in some cases, combination. I'll try to implement the simple (and historic) model, i.e. the Richardson - Water resources research, 1981.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Stochastics Weather Generators\nStochastics Weather Generators are probabilistic weather models. Like random number generators, they can quickly generate multiple random sequences, except that the produced sequences correctly reproduce some statistics of interest, e.g. spatial-temporal correlations, extremes, etc. They can be used to study climate variability in particular extremes and \"stress\" models that takes weather inputs e.g. crop models. See the IPCC note on SWG for more context.","category":"page"}]
}
