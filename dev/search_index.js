var documenterSearchIndex = {"docs":
[{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"EditURL = \"../../../examples/tuto_paper.jl\"","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using Markdown#hide\ncd(@__DIR__)#hide","category":"page"},{"location":"examples/tuto_paper/#Multisite-daily-Stochastic-Weather-Generator","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"This tutorial describes the numerical applications described in the paper Interpretable Seasonal Hidden Markov Model for spatio-temporal stochastic rain generation in France by Emmanuel Gobet (CMAP - √âcole Polytechnique), David M√©tivier (MISTEA ‚Äì INRAE) and Sylvie Parey (R&D ‚Äì EDF). It shows a fully reproducible example on how to use the package StochasticWeatherGenerators.jl to reproduce, step-by-step, exactly (almost) all the figures of the paper.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"The paper describes the construction of a Stochastic Weather Generator with an Autoregressive Seasonal Hidden Markov Model (SHMM). The SHMM is trained with French weather stations, and the hidden states are interpreted as weather regimes. The model is validated with simulations, especially for its ability to reproduce extreme weather, e.g. droughts. In the paper, the model is also used with Climate Change RCP scenarios (not shown here).","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"<img src=\"https://github.com/dmetivie/StochasticWeatherGenerators.jl/assets/46794064/5fe1d677-877d-4fd5-83ac-29d30f728ca5\" width=\"95%\" alt = \"Schematic of the Autoregressive Seasonal Hidden Markov Model\"/>","category":"page"},{"location":"examples/tuto_paper/#Set-up","page":"Multisite daily Stochastic Weather Generator","title":"Set up","text":"","category":"section"},{"location":"examples/tuto_paper/#Package-and-functions","page":"Multisite daily Stochastic Weather Generator","title":"Package and functions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"note: For Julia new user\nThere are several ways to add a package before using, one way is for this tutorial to copy-paste (it might take a while):import Pkg\nPkg.add([\"CSV\", \"JLD\", \"DelimitedFiles\", \"DataFrames\", \"DataFramesMeta\", \"StatsBase\", \"Random\", \"Distributions\", \"StatsPlots\", \"LaTeXStrings\"])","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using CSV, JLD, DelimitedFiles # File Read/Load/Save\n\nusing DataFrames, DataFramesMeta # DataFrames\n\nusing Dates\n\nusing StatsBase, Random\n\nusing Distributions","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"The two main packages for this tutorial are not yet registered in the official Julia registry, since they are not quite fully ready. They can be either added through my local Julia registry with the LocalRegistry.jl package i.e.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using Pkg\npkg\"registry add https://github.com/dmetivie/LocalRegistry\"\nPkg.add(\"SmoothPeriodicStatsModels\")\nPkg.add(\"StochasticWeatherGenerators\")","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Or directly on the master branch with added via url i.e.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"import Pkg\nPkg.add(url = \"https://github.com/dmetivie/SmoothPeriodicStatsModels.jl\")\nPkg.add(url = \"https://github.com/dmetivie/StochasticWeatherGenerators.jl\")","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using SmoothPeriodicStatsModels # Name might change. Small collection of smooth periodic models e.g. AR, HMM\n\nusing StochasticWeatherGenerators # interface to use with SmoothPeriodicStatsModels.jl","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Random.seed!(1234)","category":"page"},{"location":"examples/tuto_paper/#Settings-for-plotting","page":"Multisite daily Stochastic Weather Generator","title":"Settings for plotting","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Some settings and packages to have nice plots.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"using StatsPlots, LaTeXStrings\nusing StatsPlots.PlotMeasures # To play with margin in Plots\n\ngr() # plotly() # for interactive plots\ndefault(fontfamily=\"Computer Modern\")\ncur_colors = get_color_palette(:auto, 100);\nmy_palette(K) = palette(vcat(cur_colors[1], [cur_colors[c] for c in 3:4], cur_colors[2]), K)\n\nfile_for_plot_utilities = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_plot.jl\")\ninclude(file_for_plot_utilities)","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"To plot maps, we use GeoMakie.jl + NaturalEarth.jl. Note that using cartopy with PyCall.jl also works very well.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"For the following code to work you will need to add the following packages","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"import Pkg\nPkg.add(\"NaturalEarth\", \"GeoMakie\", \"CairoMakie\")","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"file_for_maps_with_geomakie = download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/examples/utilities_geo_makie_features.jl\") # download file from a GitHub repo\ninclude(file_for_maps_with_geomakie)","category":"page"},{"location":"examples/tuto_paper/#Global-Parameters","page":"Multisite daily Stochastic Weather Generator","title":"Global Parameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Number of days in a year (choice here is 366)","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"T = 366","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Define the French area for map (Longitude and latitude) plot and the precision of the map precision_scale","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"precision_scale = 50 # meter\n\nLON_min = -5 # West\n\nLON_max = 10 # East\n\nLAT_min = 41 # South\n\nLAT_max = 52 # North","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"conversion_factor for rain amounts RR in 0.1 mm to mm","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"conversion_factor = 0.1 # 0.1 mm -> mm","category":"page"},{"location":"examples/tuto_paper/#HMM-Hyperparameters","page":"Multisite daily Stochastic Weather Generator","title":"HMM Hyperparameters","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Number of hidden states","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"K = 4\n\nmy_pal = my_palette(K); # just colors I like for plotting weather regime!\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Degree ùêÉùêûùê† of the trigonometric expansion It could be an array different for each station and variable. Not implemented yet though.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"ùêÉùêûùê† = 2","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Local memory order i.e. at station j, mathbbP(Y_n^(j) = y_n^(j) mid Z = k Y_n-1n-textttlocal memory^(j) = y_n-1n-textttlocal memory^(j))","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"local_order = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"note: Note\nThe local_order and/or ùêÉùêûùê† could be a vector/matrix of size D and different for each station, and also different depending on wet or dry past. Not yet implemented.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"size_order = 2^local_order\n\nprintln(\"K = $K, \", \"local_order = $local_order, \", \"degree = $ùêÉùêûùê†\")","category":"page"},{"location":"examples/tuto_paper/#Data","page":"Multisite daily Stochastic Weather Generator","title":"Data","text":"","category":"section"},{"location":"examples/tuto_paper/#Select-relevant-stations-from-the-station.txt-file","page":"Multisite daily Stochastic Weather Generator","title":"Select relevant stations from the station.txt file","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Here we","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Remove white space at the right of the CN, STANAME which is caused by imperfect CVS importation\nSelect only the stations with 100% valid data for the period Date(1955,12,31) .‚â§ :DATE .‚â§ Date(2019,12,31)\nShorten station names","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    station_file = Base.download(\"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/weather_files/stations.txt\")\n    station_all = CSV.read(station_file, DataFrame, header=18, normalizenames=true, ignoreemptyrows=true)\n    station_all = @chain station_all begin\n        @transform(:CN = rstrip.(:CN), :STANAME = rstrip.(:STANAME))\n        # @subset(:CN .‚àà tuple([\"FR\", \"BE\", \"LU\", \"CH\"])) # Choose that if you want to look at all stations in France, Belgium, Luxembourg and Switzerland.\n        @subset(:STAID .‚àà tuple([32, 33, 34, 36, 39, 203, 322, 323, 434, 736, 737, 738, 740, 742, 745, 749, 750, 755, 756, 757, 758, 786, 793, 2192, 2203, 2205, 2207, 2209, 11244, 11245, 11247, 11249]))\n        @transform(:STANAME = shortname.(:STANAME))\n    end\nend\n\nselected_station_name = [\"BOURGES\", \"TOULOUSE\", \"MARIGNANE\", \"LUXEMBOURG\", \"LILLE\", \"EMBRUN\", \"BASTIA\", \"LA HAGUE\", \"CHASSIRON\", \"ORLY\"]","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"note: Hypothesis: Conditional Independence of Rain Occurrences\nYou can change the selected stations. However, keep in mind that for the model to work, the conditional independence hypothesis must hold between stations i.e. mathbbP(Y_1 = y_1 cdots Y_S = y_smid Z = k) = prod_s=1^S mathbbP(Y_s = y_s). Hence stations must be sufficiently far apart. Check out this MNIST example to see Bernoulli mixtures in action!","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"station = @subset(station_all, :STANAME .‚àà tuple(selected_station_name))\n\nSTAID = station.STAID #[32, 33, 39, 203, 737, 755, 758, 793, 11244, 11249];\n\nstation_name = station.STANAME","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Sort stations (index) by latitude. It is useful for plotting from North to South.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"staid_lat = sortperm(station.LAT, rev=true);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Station number","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"D = length(STAID)","category":"page"},{"location":"examples/tuto_paper/#Date-range","page":"Multisite daily Stochastic Weather Generator","title":"Date range","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"date_start = Date(1956)","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Date including the previous days used in the initial condition (in case local_memory > 0)","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"date_start_w_memory = date_start - Day(local_order)\n\ndate_end = Date(2020) - Day(1)\n\nevery_year = date_start:Day(1):date_end\n\nevery_year_w_memory = date_start_w_memory:Day(1):date_end\n\nn2t = dayofyear_Leap.(every_year)\n\nN = length(n2t)","category":"page"},{"location":"examples/tuto_paper/#Treat-data","page":"Multisite daily Stochastic Weather Generator","title":"Treat data","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Load into a DataFrame the (ECA) RR files (rain). It filters by date and valid data. It also adds a column :bin for rain events (0: dry, 1: wet).","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    data_stations = collect_data_ECA.(STAID, date_start_w_memory, date_end, \"https://raw.githubusercontent.com/dmetivie/StochasticWeatherGenerators.jl/master/weather_files/ECA_blend_rr/RR_\", portion_valid_data=1, skipto=22, header=21, url=true)\n    for i = eachindex(data_stations)\n        @transform!(data_stations[i], :bin = onefy.(:RR))\n    end\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Binary matrix version of the rain event at the D stations.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Yall = BitMatrix(reduce(hcat, [data_stations[j].bin for j = 1:D]))\n\nY_past = BitMatrix(Yall[1:local_order, :]) # rand(Bool, local_order, D)\n\nŒæ = [1; zeros(K - 1)];  # 1 jan 1956 was most likely a type Z = 1 wet day all over France\n\nY = Yall[1+local_order:end, :]","category":"page"},{"location":"examples/tuto_paper/#Map-of-stations","page":"Multisite daily Stochastic Weather Generator","title":"Map of stations","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Convert LAT/LON coordinates from DMS to DD which seems most widely accepted format.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"LAT_idx = dms_to_dd.(station.LAT)\n\nLON_idx = dms_to_dd.(station.LON)\n\nlong_spell = [longuest_spell(y) for y in eachcol(Y)]\n\nFR_map_spell = map_with_stations(LON_idx, LAT_idx, long_spell; station_name=station_name, show_value=true, colorbar_show=true, precision_scale = precision_scale)","category":"page"},{"location":"examples/tuto_paper/#Fit-the-seasonal-HMM","page":"Multisite daily Stochastic Weather Generator","title":"Fit the seasonal HMM","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"note: Hypothesis: Smooth parameter evolution\nWe assume all models e.g. HMM, rain mixture to have parameters evolving smoothly with periodicity T for t in 1 T. For example a Bernoulli parameter will writep(t) = dfrac11 + e^P(t) in 0 1with    P_c(t) = c_0 + sum_j=1^textttDeg left(c_2j-1cosleft(dfrac2piTj tright) + c_2jsinleft(dfrac2piTj tright)right)","category":"page"},{"location":"examples/tuto_paper/#Fit-slice:-naive-estimation","page":"Multisite daily Stochastic Weather Generator","title":"Fit slice: naive estimation","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"note: Note\nBefore inferring the HMM parameters with the EM (Baum-Welch) algorithm, we do a first naive inference that will be used as initial condition for the EM.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"The reference station ref_station is used to sort the hidden states obtained via the slide initialization Here we choose j=1 to STAID=32 to BOURGES because it is a central station for France","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"ref_station = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"This generates a random Periodic HMM that we then fit slice by slice (day by day). See paper.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"hmm_random = randhierarchicalPeriodicHMM(K, T, D, local_order; Œæ=Œæ, ref_station=ref_station);\n\n@time \"FitMLE SHMM (Slice)\" hmm_slice = fit_mle_all_slices(hmm_random, Y, Y_past; n2t=n2t, robust=true, rand_ini=true, Dirichlet_Œ±=0.8, history=false, n_random_ini=1, Y‚Çú_extanted=[-12, -7, 0, 6, 13]);\n\nŒ∏·¥¨_slice, Œ∏·¥Æ_slice = fit_Œ∏!(hmm_slice, ùêÉùêûùê†);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Fit-with-Baum-Welch-using-the-slice-estimate-as-a-starting-point","page":"Multisite daily Stochastic Weather Generator","title":"Fit with Baum Welch using the slice estimate as a starting point","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"With the Slice estimate as a good starting point for the full (seasonal) Baum Welch EM algorithm we fit the model!","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"tip: Tip\nTo accelerate the fitting procedure (especially for larger models or when testing various model hyperparameters), one can dousing Distributed\naddprocs(10) # number of worker to add\n@everywhere SmoothPeriodicStatsModels # load the pkg on each workerThen the fitting loop inside fit_mle will be distributed. See the official Julia doc for more info. On smaller models it does not worth it since adding workers add some compilation and communication time.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"@time \"FitMLE SHMM (Baum Welch)\" hmm_fit, Œ∏q_fit, Œ∏y_fit, hist, histo_A, histo_B = fit_mle(hmm_slice, Œ∏·¥¨_slice, Œ∏·¥Æ_slice, Y, Y_past,\n    maxiter=10000, robust=true; display=:final, silence=true, tol=1e-3, Œ∏_iters=true, n2t=n2t);\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Uncomment to load previously computed hmm","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"# hmm_infos = load(\"save_tuto_path/hmm_fit.jld\")\n# hmm_fit = hmm_infos[\"hmm\"]\n# hist = hmm_infos[\"hist\"]\n# Œ∏q_fit = hmm_infos[\"Q_param\"]\n# Œ∏y_fit = hmm_infos[\"Y_param\"]","category":"page"},{"location":"examples/tuto_paper/#Visualization-of-the-HMM-parameters","page":"Multisite daily Stochastic Weather Generator","title":"Visualization of the HMM parameters","text":"","category":"section"},{"location":"examples/tuto_paper/#Transition-matrix","page":"Multisite daily Stochastic Weather Generator","title":"Transition matrix","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    pA = [plot(legendfont=14, foreground_color_legend=nothing, background_color_legend=nothing, legend_columns=4, tickfont=12, legendfontsize=16) for k in 1:K]\n    for k in 1:K\n        [plot!(pA[k], hmm_fit.A[k, l, :], c=my_color(l, K), label=L\"Q_{%$(k)\\to %$(l)}\", legend=:top, lw=1.75) for l in 1:K]\n        hline!(pA[k], [0.5], c=:black, label=:none, s=:dot)\n        xticks!(pA[k], vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366), vcat(string.(monthabbr.(1:12)), \"\"), xlims=(0, 367), ylims=(0, 1))\n    end\n    pallA = plot(pA..., size=(1000, 500))\nend","category":"page"},{"location":"examples/tuto_paper/#Rain-probabilities","page":"Multisite daily Stochastic Weather Generator","title":"Rain probabilities","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    mm = 1\n    jt = D\n    pB = [plot(legendfont=14, title=\"$(station_name[j])\", titlefontsize=17, tickfont=14, legendfontsize = 16) for j in 1:jt]\n    for j in 1:jt\n        [plot!(pB[j], succprob.(hmm_fit.B[k, :, j, mm]), c=my_color(k, K), label=islabel(j, 3, L\"\\mathbb{P}(Y = \\textrm{wet}\\mid Z = %$k, H = \\textrm{dry})\"), lw=2) for k in 1:K]\n        hline!(pB[j], [0.5], c=:black, label=:none, s=:dot)\n        xticks!(\n            pB[j],\n            vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366),\n            vcat(string.(first.(monthabbr.(1:12))))\n        )\n        xlims!(pB[j], (0, 367))\n        ylims!(pB[j], (0, 1))\n    end\n    pallB = plot(pB[staid_lat]..., size=(3000 / 2, 1000 / 1), layout=(2, 5))\nend","category":"page"},{"location":"examples/tuto_paper/#Spatial-Rain-probability","page":"Multisite daily Stochastic Weather Generator","title":"Spatial Rain probability","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"memory_past_cat = 1","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"h = 1 (day before dry) or 2 (day before wet) mathbbP(Y = textRainmid Z = k H = h) with h = memory_past_cat","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"For now there are some scale rendering issues due to an GeoMakie.jl issue so it might be tiny.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"p_FR_map_mean_prob = map_with_stations(LON_idx, LAT_idx, [[mean(succprob.(hmm_fit.B[k, :, j, memory_past_cat])) for j in 1:length(STAID)] for k in 1:K], colorbar_show=true, colorbar_title = L\"\\mathbb{P}(Y = \\text{Rain}\\mid Z = k, H = 1)\", precision_scale = precision_scale)","category":"page"},{"location":"examples/tuto_paper/#Inference-of-the-historical-hidden-states","page":"Multisite daily Stochastic Weather Generator","title":"Inference of the historical hidden states","text":"","category":"section"},{"location":"examples/tuto_paper/#Viterbi-algorithm","page":"Multisite daily Stochastic Weather Generator","title":"Viterbi algorithm","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"zÃÇ = viterbi(hmm_fit, Y, Y_past; n2t=n2t)\n\ndata_stations_z = map(data_stations) do df\n    @transform(df, :z = [fill(missing, local_order); zÃÇ])\nend\n\nzÃÇ_per_cat = [findall(zÃÇ .== k) for k in 1:K]","category":"page"},{"location":"examples/tuto_paper/#Visualization-of-the-historical-sequences-of-hidden-states","page":"Multisite daily Stochastic Weather Generator","title":"Visualization of the historical sequences of hidden states","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"year_range = unique(year.(data_stations[1][1+local_order:end, :DATE]));\n\nidx_year = [findall(x -> year.(x) == m, data_stations[1][1+local_order:end, :DATE]) for m in year_range];\n\nselect_year = unique(sort([4:10:length(year_range); 21; 48; 64]))\n\nbegin\n    year_nb = length(select_year)\n    z_hat_mat = zeros(year_nb, 366)\n\n    for (i, y) in enumerate(select_year)\n        if isleapyear(year_range[y])\n            z_hat_mat[i, :] = zÃÇ[idx_year[y]]\n        else\n            z_hat_mat[i, :] = [zÃÇ[idx_year[y]]; 0]\n        end\n    end\n    thick = 1\n    heatmap(z_hat_mat, colorbar=:none, c=my_palette(K), minorticks=:false, framestyle=:xbox, grid=:none, thickness_scaling=thick)\n    xticks!(vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366), vcat(string.(monthabbr.(1:12)), \"\"), xlims=(0, 367), xtickfontsize=14 / thick, ytickfontsize=14 / thick)\n    hline!((1:year_nb) .+ 0.5, c=:black, legend=:none, lw=4)\n    ylims!(0.5, year_nb + 0.5)\n    pviterbi = yticks!(1:year_nb, string.(year_range[select_year]), size=(1000, 600))\nend","category":"page"},{"location":"examples/tuto_paper/#Adding-Rain-amounts-to-the-model","page":"Multisite daily Stochastic Weather Generator","title":"Adding Rain amounts to the model","text":"","category":"section"},{"location":"examples/tuto_paper/#Marginal-distribution","page":"Multisite daily Stochastic Weather Generator","title":"Marginal distribution","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"We fit the marginals of the rain amount R0 at each station s and for each hidden state Z independently. We use a mixture of exponential functions","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"g(r) = w dfrace^-frac rvartheta_1vartheta_1 + (1-w)  dfrace^-frac rvartheta_2vartheta_2","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"whose parameters w(t), vartheta_1(t) and vartheta_2(t) are smooth periodic functions of the day of the year.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"@time \"FitMLE RR\" mix_allE = fit_mle_RR.(data_stations_z, K, local_order, mix‚ÇÄ=StochasticWeatherGenerators.mix_ini(T));\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Thanks to Distributions.jl PR #1389 (September 2nd, 2021) and Julia multiple dispatch, the quantile function of Mixtures can be very efficiently computed.","category":"page"},{"location":"examples/tuto_paper/#Rain-correlations","page":"Multisite daily Stochastic Weather Generator","title":"Rain correlations","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"We fit a Gaussian copula to each pair of stations for joint rainy days only.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"!!! warning   For some hidden states corresponding to dry weather, it might happen that for some pair of stations, there are no simultaneous rain occurrences in a rain category Z = k.   In that case a missing coefficient is returned.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    Œ£¬≤RR = cov_RR(data_stations_z, K)\n    if K == 4\n        Œ£¬≤RR[2][6, 3] = Œ£¬≤RR[4][6, 3]\n        Œ£¬≤RR[2][3, 6] = Œ£¬≤RR[4][6, 3]\n    end\n    Œ£¬≤RR = convert.(Matrix{Float64}, Œ£¬≤RR)\nend\n\nif K == 4\n    @warn \"For Embrun j=6 and Marignane j=3 the hidden state Z=2 and Z=4 are pretty similar (dry), so we replace the `missing` coefficient of Z=2 with the one of Z = 4\"\nend","category":"page"},{"location":"examples/tuto_paper/#Simulation","page":"Multisite daily Stochastic Weather Generator","title":"Simulation","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Now we are ready to generate samples from the SWG model.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Nb is the number of realization","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Nb = 1000","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Sample the (seasonal) HMM model and output the sequence of hidden states and multi-site dry/wet.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    zs = zeros(Int, N, Nb)\n    ys = zeros(Bool, N, D, Nb)\n    @time \"Simulations Z, Y\" for i in 1:Nb\n        zs[:, i], ys[:, :, i] = rand(hmm_fit, n2t; y_ini=Yall[1:local_order, :], z_ini=1, seq=true)\n    end\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Given the hidden states and dry/wet, it generates the rain amounts at each station (correlated with a Gaussian Copula).","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    rs = zeros(D, N, Nb)\n    @time \"Simulations RR>0\" for i in 1:Nb\n        rs[:, :, i] = rand_RR(mix_allE, n2t, zs[:, i], ys[:, :, i]', Œ£¬≤RR)\n    end\nend","category":"page"},{"location":"examples/tuto_paper/#Results","page":"Multisite daily Stochastic Weather Generator","title":"Results","text":"","category":"section"},{"location":"examples/tuto_paper/#Spell-distribution","page":"Multisite daily Stochastic Weather Generator","title":"Spell distribution","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"select_month to choose the month where to compute the spell distributions (summer month, winter, etc.) select_month = 1:12 corresponds to all months.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"select_month = 1:12\n\nidx_months = [findall(x -> month.(x) == m, data_stations[1][1+local_order:end, :DATE]) for m in 1:12]\n\nidx_month_vcat = vcat(idx_months[select_month]...)\n\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_months];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Historic-spells","page":"Multisite daily Stochastic Weather Generator","title":"Historic spells","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"len_spell_hist = [pmf_spell(Y[idx_month_vcat, j], dw) for j in 1:D, dw in 0:1];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Simulation-spells","page":"Multisite daily Stochastic Weather Generator","title":"Simulation spells","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"len_spell_simu = [pmf_spell(ys[idx_month_vcat, j, i], dw) for i in 1:Nb, j in 1:D, dw in 0:1];\nnothing #hide","category":"page"},{"location":"examples/tuto_paper/#Dry-spell","page":"Multisite daily Stochastic Weather Generator","title":"Dry spell","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"make_range(y, step=1) = range(extrema(y)..., step=step)\n\nbegin\n    dry_or_wet = 1 # dry\n    p_spell_dry = [plot(ylims=(1e-4, 1e-0), tickfont=11, legendfontsize=13) for j = 1:D]\n    for j = 1:D\n        all_spells = len_spell_simu[:, j, dry_or_wet]\n        errorlinehist!(p_spell_dry[j], all_spells, groupcolor=:grey, legend=:topright, label=islabel(j, staid_lat[[1]], L\"Simu $q_{0,100}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n        errorlinehist!(p_spell_dry[j], all_spells, groupcolor=:red, label=islabel(j, staid_lat[[1]], L\"Simu $q_{25,75}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n        histo_spell = len_spell_hist[j, dry_or_wet]\n        errorlinehist!(p_spell_dry[j], [histo_spell], label=islabel(j, staid_lat[[1]], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:probability, bins=make_range(histo_spell), errortype=:percentile)\n        xlims!(p_spell_dry[j], 0, 2 + maximum(1.5maximum.(histo_spell)))\n        yaxis!(:log10)\n    end\n\n    [xlabel!(p_spell_dry[j], \"Nb of days\", xlabelfontsize=12) for j in staid_lat[6:10]]\n    [ylabel!(p_spell_dry[j], \"PMF\", ylabelfontsize=12) for j in staid_lat[[1, 6]]]\n    [title!(p_spell_dry[j], station_name[j], titlefontsize=13) for j = 1:D]\n    pall_spell_dry = plot(p_spell_dry[staid_lat]..., size=(3000 / 2.5, 1000 / 1.5), layout=(2, 5), left_margin=0.5cm, bottom_margin=0.275cm)\nend","category":"page"},{"location":"examples/tuto_paper/#Wet-spell","page":"Multisite daily Stochastic Weather Generator","title":"Wet spell","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    dry_or_wet = 2 # wet\n    p_spell_wet = [plot(ylims=(1e-4, 1e-0), tickfont=11, legendfontsize=13) for j = 1:D]\n    for j = 1:D\n        all_spells = len_spell_simu[:, j, dry_or_wet]\n        errorlinehist!(p_spell_wet[j], all_spells, groupcolor=:grey, legend=:topright, label=islabel(j, staid_lat[[1]], L\"Simu $q_{0,100}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n        errorlinehist!(p_spell_wet[j], all_spells, groupcolor=:red, label=islabel(j, staid_lat[[1]], L\"Simu $q_{25,75}$\"), norm=:probability, bins=make_range(reduce(vcat, all_spells)), errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n        histo_spell = len_spell_hist[j, dry_or_wet]\n        errorlinehist!(p_spell_wet[j], [histo_spell], label=islabel(j, staid_lat[[1]], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:probability, bins=make_range(histo_spell), errortype=:percentile)\n        xlims!(p_spell_wet[j], 0, 2 + maximum(1.5maximum.(histo_spell)))\n        yaxis!(:log10)\n    end\n\n    [xlabel!(p_spell_wet[j], \"Nb of days\", xlabelfontsize=12) for j in staid_lat[6:10]]\n    [ylabel!(p_spell_wet[j], \"PMF\", ylabelfontsize=12) for j in staid_lat[[1, 6]]]\n    [title!(p_spell_wet[j], station_name[j], titlefontsize=13) for j = 1:D]\n    pall_spell_wet = plot(p_spell_wet[staid_lat]..., size=(3000 / 2.5, 1000 / 1.5), layout=(2, 5), left_margin=0.5cm, bottom_margin=0.275cm)\nend","category":"page"},{"location":"examples/tuto_paper/#Rain","page":"Multisite daily Stochastic Weather Generator","title":"Rain","text":"","category":"section"},{"location":"examples/tuto_paper/#Interpretation:-Mean-Rain-per-weather-regime-R-0-\\mid-Z-k.","page":"Multisite daily Stochastic Weather Generator","title":"Interpretation: Mean Rain per weather regime R  0 mid Z = k.","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"We plot the empirical (strictly) positive mean rain amounts per weather regime. The results are smoothed using a cyclic_moving_average with a time window of pm 15 days and the Epanechnikov kernel.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    p_rainpercat = [plot(tickfont=12, ylabelfontsize=14, titlefontsize=14, legendfontsize=13) for j = 1:D]\n    for j = 1:D\n        df_j = @chain data_stations_z[j] begin\n            dropmissing\n            @transform(:day = dayofyear_Leap.(:DATE))\n            @subset(:RR .> 0)\n            @by([:day, :z], :MEAN_RR = mean(:RR))\n            groupby(:z)\n        end\n        # Uncomment to see how the double exponential mixtures compare to the empirical data.\n        # [plot!(p_rainpercat[j], 1:T, t -> conversion_factor * mean(mix_allE[j][k, t]), label=:none, c=my_color(k, K), lw=1.5, legend = :topleft) for k in 1:K]\n        for k in 1:K\n            cycle_avg = replace(cyclic_moving_average(df_j[k].MEAN_RR, df_j[k].day, T, 15), 0 => missing)\n            @df df_j[k] plot!(p_rainpercat[j], 1:T, conversion_factor * cycle_avg, c=my_color(k, K), alpha=1, label=islabel(j, staid_lat[[4]], L\"Z = %$k\"), lw=1.5)\n        end\n        ylims!(p_rainpercat[j], 0, Inf)\n    end\n    [ylabel!(p_rainpercat[j], L\"Rain (mm/m$^2$)\") for j in staid_lat[[1, 6]]]\n    [xticks!(\n        p_rainpercat[j],\n        vcat(dayofyear_Leap.(Date.(2000, 1:12)), 366),\n        vcat(string.(first.(string.(monthabbr.(1:12)))))\n    ) for j in 1:D]\n    [title!(p_rainpercat[j], station_name[j]) for j = 1:D]\n    plt_rain_cat_mix = plot(p_rainpercat[staid_lat]..., size=(3000 / 2.2, 1000 / 1.5), layout=(2, 5), left_margin=25px)\nend","category":"page"},{"location":"examples/tuto_paper/#Univariate-Rain-distributions","page":"Multisite daily Stochastic Weather Generator","title":"Univariate Rain distributions","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"Historical vs Nb simulations distribution","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"begin\n    p_uniR = [plot(yaxis=:log10, ylims=(1e-4, 1e-0), tickfont=11, legendfontsize=13, titlefontsize=13) for j = 1:D]\n    for j = 1:D\n        dists_RR_positive_j = conversion_factor * [filter(!iszero, rs[j, :, i]) for i in 1:Nb]\n        errorlinehist!(p_uniR[j], dists_RR_positive_j, groupcolor=:grey, legend=:topright, label=islabel(j, staid_lat[[1]], L\"Simu $q_{0,100}$\"), norm=:pdf, errortype=:percentile, percentiles=[0, 100], fillalpha=0.4, centertype=:median)\n\n        errorlinehist!(p_uniR[j], dists_RR_positive_j, groupcolor=:red, label=islabel(j, staid_lat[[1]], L\"Simu $q_{25,75}$\"), norm=:pdf, errortype=:percentile, percentiles=[25, 75], fillalpha=0.5, centertype=:median)\n\n        errorlinehist!(p_uniR[j], [conversion_factor * filter(!iszero, data_stations[j].RR)], label=islabel(j, staid_lat[[1]], \"Obs\"), groupcolor=:blue, lw=1.5, norm=:pdf, errortype=:percentile)\n\n        xlims!(p_uniR[j], 0.0, Inf)\n    end\n    [plot!(p_uniR[j], xlabel=L\"Rain (mm/m$^2$)\") for j in staid_lat[6:10]]\n    [plot!(p_uniR[j], ylabel=\"PDF\") for j in staid_lat[[1, 6]]]\n\n    [title!(p_uniR[j], station_name[j]) for j = 1:D]\n\n    pall_R = plot(p_uniR[staid_lat]..., size=(3000 / 2.5, 1000 / 1.5), layout=(2, 5), bottom_margin=11px, left_margin=15px)\nend","category":"page"},{"location":"examples/tuto_paper/#Monthly-quantile-amount","page":"Multisite daily Stochastic Weather Generator","title":"Monthly quantile amount","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"rh = reduce(hcat, [df[1+local_order:end, :RR] for df in data_stations])\n\nmonth_rain_simu = [cum_monthly(rs[j, :, i], idx_all) for j in 1:D, i in 1:Nb];\n\nmonth_rain_histo = [cum_monthly(rh[:, j], idx_all) for j in 1:D]\n\nqs = [0.9, 0.5, 0.1]\n\n@time \"Plot monthly quantile\" begin\n    p_month_RR = [scatter(xtickfontsize=10, ytickfontsize=11, ylabelfontsize=12, legendfontsize = 12, foreground_color_legend=nothing) for j = 1:D]\n    for j = 1:D\n        for (Œ±, per) in enumerate([[0, 100], [25, 75]])\n            for (cc, q) in enumerate(qs)\n                errorline!(p_month_RR[j], [quantile(month_rain_simu[j, i][:, m], q) * conversion_factor for m in 1:12, i in 1:Nb], label=(Œ± == 1 ? islabel(j, 9,L\"Simu  $q_{%$(Int(q*100))}$\") : :none), fillalpha=0.18 * Œ±^2, centertype=:median, errortype=:percentile, percentiles=per, groupcolor=my_palette(length(qs))[cc])\n            end\n        end\n        for q in qs\n            scatter!(p_month_RR[j], m -> quantile(month_rain_histo[j][:, m], q) * conversion_factor, 1:12, label=(q == qs[1] ? islabel(j, 3,\"Obs\") : :none), legend = :topleft, ms=2.5, c=:blue)\n            plot!(p_month_RR[j], m -> quantile(month_rain_histo[j][:, m], q) * conversion_factor, 1:12, label=:none, c=:blue, lw=1.75)\n        end\n        xticks!(p_month_RR[j], 1:12, string.(first.(monthabbr.(1:12))))\n        ylims!(p_month_RR[j], 0, Inf)\n    end\n    [ylabel!(p_month_RR[j], L\"Rain (mm/m$^2$)\") for j in staid_lat[[1, 6]]]\n\n    [title!(p_month_RR[j], station_name[j], titlefontsize=12) for j = 1:D]\n    pall_month_RR = plot(p_month_RR[staid_lat]..., size=(1190, 500), layout=(2, 5), left_margin=19px)\nend","category":"page"},{"location":"examples/tuto_paper/#Correlations","page":"Multisite daily Stochastic Weather Generator","title":"Correlations","text":"","category":"section"},{"location":"examples/tuto_paper/#Rain-event-dry/wet","page":"Multisite daily Stochastic Weather Generator","title":"Rain event dry/wet","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"cor_bin_hist = cor(reduce(hcat, [df.bin for df in data_stations]));\n\ncor_bin_mean_simu = mean(cor(ys[:, :, i]) for i in 1:Nb);\n\n\nbegin\n    plots_cor_bin = [plot(-0.1:0.1:0.8, -0.1:0.1:0.8, aspect_ratio=true, label=:none, xlabelfontsize=16, ylabelfontsize=16, tickfont=11, legendfontsize=13) for _ in 1:1]\n    scatter!(plots_cor_bin[1], vec_triu(cor_bin_hist), vec_triu(cor_bin_mean_simu), label=\"Correlations\", xlabel=\"Observations\", ylabel=\"Simulations\", c=2)\n    [xlims!(plots_cor_bin[i], -0.1, 1) for i in 1:1]\n    [ylims!(plots_cor_bin[i], -0.1, 1) for i in 1:1]\n    annotate!(0.2, 0.7, \"MSE ‚âÉ $(round(mean(abs2, vec_triu(cor_bin_hist) - vec_triu(cor_bin_mean_simu)), digits = 4))\")\n    plot_cor_bin = plot(plots_cor_bin...)\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"The largest pair correlation error for rain occurence comes from the pair","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"println(\"$(station_name[findmax(cor_bin_hist - cor_bin_mean_simu)[2][1]]) and $(station_name[findmax(cor_bin_hist - cor_bin_mean_simu)[2][2]])\")","category":"page"},{"location":"examples/tuto_paper/#Rain-amount","page":"Multisite daily Stochastic Weather Generator","title":"Rain amount","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"cor_hist = cor(reduce(hcat, [df.RR for df in data_stations]));\n\ncorT_hist = corTail(reduce(hcat, [df.RR for df in data_stations]));\n\ncor_mean_simu = mean(cor(rs[:, :, i]') for i in 1:Nb);\n\ncorT_mean_simu = mean(corTail(rs[:, :, i]') for i in 1:Nb);\n\nbegin\n    plots_cor = [plot(-0.1:0.1:0.8, -0.1:0.1:0.8, aspect_ratio=true, label=:none, xlabelfontsize=16, ylabelfontsize=16, tickfont=11, legendfontsize=13) for _ in 1:2]\n    scatter!(plots_cor[1], vec_triu(cor_hist), vec_triu(cor_mean_simu), label=\"Correlations\", xlabel=\"Observations\", ylabel=\"Simulations\", c=2)\n    annotate!(plots_cor[1], 0.3, 0.7, \"MSE ‚âÉ $(round(mean(abs2, vec_triu(cor_hist) - vec_triu(cor_mean_simu)), digits = 4))\")\n\n    scatter!(plots_cor[2], vec_triu(corT_hist), vec_triu(corT_mean_simu), label=\"Tail index\", xlabel=\"Observations\", ylabel=\"Simulations\", c=3)\n    annotate!(plots_cor[2], 0.3, 0.7, \"MSE ‚âÉ $(round(mean(abs2, vec_triu(corT_hist) - vec_triu(corT_mean_simu)), digits = 4))\")\n\n    [xlims!(plots_cor[i], -0.1, 1) for i in 1:2]\n    [ylims!(plots_cor[i], -0.1, 1) for i in 1:2]\n    plot(plots_cor..., size=(800, 400), left_margin=15px)\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"The largest pair correlation error for rain (zero and non zero amounts) comes from the pair","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"println(\"$(station_name[findmax(cor_hist - cor_mean_simu)[2][1]]) and $(station_name[findmax(cor_hist - cor_mean_simu)[2][2]])\")","category":"page"},{"location":"examples/tuto_paper/#Gaussian-copula-hypothesis","page":"Multisite daily Stochastic Weather Generator","title":"Gaussian copula hypothesis","text":"","category":"section"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"For a pair of stations, we transform the marginal R_s0 to mathcalN(01). We compare the obtained bi-variate Normal distribution with the Mahalanobis distance to the theoretical chi^2(2)-distriubtion.","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"corŒ£ = cov2cor.(Œ£¬≤RR)\nbegin\n    j1 = 10\n    j2 = 8\n    plt_qqp_copula = plot(0:25, 0:25, aspect_ratio=:equal, legendfontsize=14, c=:black, label=:none, tickfont=12, ylabelfontsize=13, xlabelfontsize=13)\n    df_12 = leftjoin(data_stations_z[j1], data_stations_z[j2], on=:DATE, makeunique=true)\n    @subset!(df_12, :RR .> 0, :RR_1 .> 0)\n    for k in 1:K\n        df_X = @chain df_12 begin\n            @subset(:z .== k)\n            dropmissing\n            @aside u = StochasticWeatherGenerators.Copulas.pseudos(permutedims(hcat(_.RR, _.RR_1)))\n            @transform(:X = quantile(Normal(), u[1,:]), :X_1 = quantile(Normal(), u[2,:]))\n        end\n        X = hcat(df_X.X, df_X.X_1)\n        cor_sigma = [1 corŒ£[k][j1,j2]; corŒ£[k][j1,j2] 1]\n        Œ£‚Åª¬π = inv(cor_sigma)\n\n        X2 = [(x' * Œ£‚Åª¬π * x) for x in eachrow(X)] |> sort\n        ecdfX2 = ecdf(X2)(X2) * length(X2) / (length(X2) + 1)\n\n        plot!(quantile(Chisq(2), ecdfX2), X2, xlabel=L\"$\\chi^2(2)$-quantile\", c=my_color(k, K), ylabel=\"Observed squared Mahalanobis distance\", label=L\"Z = %$k \", legend=:topleft, lw=2)\n    end\n    title!(\"$(station_name[j1]) vs $(station_name[j2])\")\n    xlims!(0, 22)\n    ylims!(0, 22)\nend","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"","category":"page"},{"location":"examples/tuto_paper/","page":"Multisite daily Stochastic Weather Generator","title":"Multisite daily Stochastic Weather Generator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#StochasticWeatherGenerators.jl","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"Documentation for StochasticWeatherGenerators.jl","category":"page"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"warning: Warning\nIn construction! Note that the main functions to fit HMM, AR etc are currently in SmoothPeriodicStatsModels.jl. This will change when these packages are rebased.","category":"page"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"A Julia package, to define, fit and use a Stochastic Weather Generator (SWG) as proposed in the Interpretable Seasonal Hidden Markov Model for spatio-temporal stochastic rain generation in France paper.  This SWG relies on some \"Seasonal Hidden Markov Models\" currently implemented in the package SmoothPeriodicStatsModels.jl.","category":"page"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"note: Note\nThe objective of this package is not only to show my model, but also to propose several classic (and newer) SWG model. Hence, feel free to open an issue or open PR with ideas and models. This would allow easy model comparison and, in some cases, combination. I'll try to implement the simple (and historic) model, i.e. the Richardson - Water resources research, 1981.","category":"page"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"Go check the documentation and the fully reproducible tutorial associated with the paper.","category":"page"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"note: Stochastics Weather Generators\nStochastics Weather Generators are probabilistic weather models. Like random number generators, they can quickly generate multiple random sequences, except that the produced sequences correctly reproduce some statistics of interest, e.g. spatial-temporal correlations, extremes, etc. They can be used to study climate variability.","category":"page"},{"location":"#API","page":"StochasticWeatherGenerators.jl","title":"API","text":"","category":"section"},{"location":"#Fit-function","page":"StochasticWeatherGenerators.jl","title":"Fit function","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"fit_mle_stations\nfit_mle_RR\nfit_TN\nfit_AR1","category":"page"},{"location":"#SmoothPeriodicStatsModels.fit_mle_stations","page":"StochasticWeatherGenerators.jl","title":"SmoothPeriodicStatsModels.fit_mle_stations","text":"fit_mle_stations(df::DataFrame, K, T, degree, local_order)\n\nGiven a DataFrame df with known hidden states column z ‚àà 1:K. The rain occurrences of the new station are fitted conditionally to the hidden state. For local_order>0 the model is also autoregressive with its past.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.fit_mle_RR","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.fit_mle_RR","text":"fit_mle_RR(df::DataFrame, K, local_order; maxiter=5000, tol=2e-4, robust=true, silence=true, warm_start=true, display=:none, mix‚ÇÄ=mix_ini(T))\n\nmix_allE = fit_mle_RR.(data_stations, K, local_order)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.fit_TN","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.fit_TN","text":"fit_TN(df_full::DataFrame, ùêÉùêûùê†, T; kwargs...)\n\nFit the variable TN (daily minimum temperature). In fact it fits the difference ŒîT = TX - TN to ensure a positive difference between TX and TN\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.fit_AR1","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.fit_AR1","text":"fit_AR1(df_full::DataFrame, X, ùêÉùêûùê†, T, K)\n\nFit a Seasonal AR(1) model of period T and with K hidden states for the variable X of the DataFrame df_full. X_n+1 = mu(t_n) + phi(t_n) X_t + sigma(t_n)xi\n\n\n\n\n\n","category":"function"},{"location":"#Climate-indexes","page":"StochasticWeatherGenerators.jl","title":"Climate indexes","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"VCX3\ncum_monthly\ncorTail\nlonguest_spell\npmf_spell\n","category":"page"},{"location":"#StochasticWeatherGenerators.VCX3","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.VCX3","text":"VCX3(df; y_col, nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y for every year.  By default, y_col is the first column not with a Date type\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nVCX3(df)\n\n\n\n\n\nVCX3(y, idxs; nb = 3)\n\nYearly Max of nb = 3 days sliding mean for y. Here idxs can be a vector of vector (or range) corresponds to the index of every year.\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nVCX3(df.Temperature, idx_year)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.cum_monthly","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cum_monthly","text":"cum_monthly(y::AbstractArray, idxs)\n\nusing DataFrames, Dates, RollingFunctions\ntime_range = Date(1956):Day(1):Date(2019,12,31)\nyear_range = unique(year.(time_range))\ndf = DataFrame(:DATE => time_range, :Temperature => 20 .+ 5*randn(length(time_range)))\nidx_year = [findall(x-> year.(x) == m, df[:, :DATE]) for m in year_range]\nidx_month = [findall(x-> month.(x) == m, df[:, :DATE]) for m in 1:12]\nidx_all = [intersect(yea, mon) for yea in idx_year, mon in idx_month]\ncum_monthly(y, idx_all)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.corTail","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.corTail","text":"corTail(x::AbstractMatrix, q = 0.95)\n\nCompute the (symmetric averaged) tail index matrix M of a vector x, i.e. M[i, j] = (‚Ñô(x[:,j] > Fx‚±º(q) ‚à£ x[:,i] > Fx·µ¢(q)) + ‚Ñô(x[:,i] > Fx·µ¢(q) ‚à£ x[:,j] > Fx‚±º(q)))/2 where Fx(q) is the CDF of x. Note it uses the same convention as cor function i.e. observations in rows and features in column.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.longuest_spell","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.longuest_spell","text":"longuest_spell(y::AbstractArray; value=0)\n\nCompute the length of the longuest consecutive sequence of value in y\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.pmf_spell","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.pmf_spell","text":"pmf_spell(y::AbstractVector, value)\n\nReturn the distribution of spells (consecutive sequence of with the same value) length of value in y\n\n\n\n\n\n","category":"function"},{"location":"#Simulations","page":"StochasticWeatherGenerators.jl","title":"Simulations","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"rand_RR\nrand_cond","category":"page"},{"location":"#StochasticWeatherGenerators.rand_RR","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.rand_RR","text":"rand_RR(mixs::AbstractArray{<:MixtureModel}, n2t::AbstractVector, z::AbstractVector, y::AbstractMatrix, Œ£k::AbstractArray)\n\nGenerate a (nonhomegenous) sequence of length length(n2t) of rain amounts conditionally to a given dry/wet matrix y and (hidden) state sequence z. Univariate distribution are given by mixs while correlations are given by covariance matrix Œ£k.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.rand_cond","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.rand_cond","text":"rand_cond(œµ, z, Œ∏_uni, Œ∏_cor, n2t, T)\n\nGenererate a random variable conditionnaly to another one Using Copula\n\nX_1 mid X_2 = œµ sim mathcalNleft(mu_1 + dfracsigma_1sigma_2rho (a - mu_2) (1-rho^2)sigma_1^2 right)\n\nFor two N(0,1)\n\nX_1 mid X_2 = œµ sim mathcalNleft(rho a  (1-rho^2) right)\n\n\n\n\n\n","category":"function"},{"location":"#Correlation-utilities","page":"StochasticWeatherGenerators.jl","title":"Correlation utilities","text":"","category":"section"},{"location":"#For-temperature","page":"StochasticWeatherGenerators.jl","title":"For temperature","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"cor_groupby\ncor_groupbyTXTN\ncov_ar1","category":"page"},{"location":"#StochasticWeatherGenerators.cor_groupby","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cor_groupby","text":"Compute and fit the `cor` between two `var` with a smooth function for each `z`.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.cor_groupbyTXTN","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cor_groupbyTXTN","text":"Compute and fit the `cor` between `:TX` and `:TX-:TN` with a smooth function for each `z`.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.cov_ar1","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cov_ar1","text":"Fit residual to constant (in time) cov matrices for each weather regime Example:\n\ncov_ar1(data_stations, ar1sTX, :TX, K)\n\n\n\n\n\n","category":"function"},{"location":"#For-rain","page":"StochasticWeatherGenerators.jl","title":"For rain","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"cov_RR\nŒ£_Spearman2Pearson\nŒ£_Kendall2Pearson\njoint_rain","category":"page"},{"location":"#StochasticWeatherGenerators.cov_RR","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.cov_RR","text":"cov_RR(dfs::AbstractArray{<:DataFrame}, K)\n\nEach df must have :DATE, :RR, :z (same :z for each df)\n\nŒ£¬≤RR = cov_RR(data_stations, K)\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.Œ£_Spearman2Pearson","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.Œ£_Spearman2Pearson","text":"Œ£_Spearman2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Spearman correlation #TODO Add ref\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.Œ£_Kendall2Pearson","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.Œ£_Kendall2Pearson","text":"Œ£_Kendall2Pearson(M::AbstractMatrix)\n\nCompute the Pearson correlation coefficient i.e. the classic one from the Kendall correlation #TODO Add ref\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.joint_rain","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.joint_rain","text":"joint_rain(M::AbstractMatrix, j1::Integer, j2::Integer, r = 0)\n\nSelect all the rows of M with values for (two) columns above some value r.\n\n\n\n\n\n","category":"function"},{"location":"#Map-utilities","page":"StochasticWeatherGenerators.jl","title":"Map utilities","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"distance_x_to_y\ndms_to_dd","category":"page"},{"location":"#StochasticWeatherGenerators.distance_x_to_y","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.distance_x_to_y","text":"distance_x_to_y\n\nDistance in km between two stations.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.dms_to_dd","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.dms_to_dd","text":"dms_to_dd(l)\n\nConvert Degrees Minutes Seconds to Decimal Degrees. Inputs are strings of the form\n\nLAT    : Latitude in degrees:minutes:seconds (+: North, -: South)\nLON    : Longitude in degrees:minutes:seconds (+: East, -: West)\n\n\n\n\n\n","category":"function"},{"location":"#Data-manipulation","page":"StochasticWeatherGenerators.jl","title":"Data manipulation","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"collect_data_ECA\nselect_in_range_df\nshortname","category":"page"},{"location":"#StochasticWeatherGenerators.collect_data_ECA","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.collect_data_ECA","text":"collect_data_ECA(STAID::Integer, path::String, var::String=\"RR\"; skipto=19, header = 18)\n\npath gives the path where all data files are stored in a vector\n\n\n\n\n\ncollect_data_ECA(STAID, date_start::Date, date_end::Date, path::String, var::String=\"RR\"; portion_valid_data=1, skipto=19, header = 18, return_nothing = true)\n\npath gives the path where all data files are stored in a vector\nFilter the DataFrame s.t. date_start ‚â§ :DATE ‚â§ date_end\nvar = \"RR\", \"TX\" etc.\nportion_valid_data is the portion of valid data we are ok with. If we don't want any missing, fix it to 1.\nskipto and header for csv files with meta informations/comments at the beginning of files. See CSV.jl.\nreturn_nothing if true it will return nothing is the file does not exists or does not have enough valid data.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.select_in_range_df","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.select_in_range_df","text":"select_in_range_df(datas, start_Date, interval_Date, [portion])\n\nSelect station with some data availability in dates and quality (portion of valid data).  Input is a vector (array) of DataFrame (one for each station for example) or a Dict of DataFrame. If 0 < portion ‚â§ 1 is specified, it will authorize some portion of data to be missing.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticWeatherGenerators.shortname","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.shortname","text":"shortname(name::String)\n\nExperimental function that returns only the most relevant part of a station name.\n\nlong_name = \"TOULOUSE-BLAGNAC\"\nshortname(long_name) # \"TOULOUSE\"\n\n\n\n\n\n","category":"function"},{"location":"#Generic-utilities","page":"StochasticWeatherGenerators.jl","title":"Generic utilities","text":"","category":"section"},{"location":"","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.jl","text":"my_color","category":"page"},{"location":"#StochasticWeatherGenerators.my_color","page":"StochasticWeatherGenerators.jl","title":"StochasticWeatherGenerators.my_color","text":"my_color(k, K)\n\nConvenience for plot colors pattern and hidden states to blue for k=1 (‚àºwetter) and orange for k=K (‚àºdriest)\n\n\n\n\n\n","category":"function"}]
}
